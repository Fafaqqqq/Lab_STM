
STM32F4-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001738  08001738  00011738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800175c  0800175c  0001175c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001768  08001768  00011768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  20000000  0800176c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
  8 .bss          00000074  20000038  20000038  00020038  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000ac  200000ac  00020038  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c4c4  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001ea6  00000000  00000000  0002c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000064fa  00000000  00000000  0002e3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  00034f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fd4c  00000000  00000000  00035798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba84  00000000  00000000  000554e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2190  00000000  00000000  00060f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001230f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001074  00000000  00000000  0012314c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001720 	.word	0x08001720

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08001720 	.word	0x08001720

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004c0:	b530      	push	{r4, r5, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004c4:	bb08      	cbnz	r0, 800050a <BSP_LED_Init+0x4a>
 80004c6:	4b27      	ldr	r3, [pc, #156]	; (8000564 <BSP_LED_Init+0xa4>)
 80004c8:	9001      	str	r0, [sp, #4]
 80004ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004cc:	f042 0208 	orr.w	r2, r2, #8
 80004d0:	631a      	str	r2, [r3, #48]	; 0x30
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	f003 0308 	and.w	r3, r3, #8
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004dc:	4c22      	ldr	r4, [pc, #136]	; (8000568 <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004de:	4b23      	ldr	r3, [pc, #140]	; (800056c <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004e0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004e4:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004e8:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80004ea:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ee:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004f2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80004f4:	2302      	movs	r3, #2
 80004f6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80004f8:	f000 f97e 	bl	80007f8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80004fc:	6860      	ldr	r0, [r4, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	4629      	mov	r1, r5
 8000502:	f000 fa53 	bl	80009ac <HAL_GPIO_WritePin>
}
 8000506:	b00b      	add	sp, #44	; 0x2c
 8000508:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800050a:	2801      	cmp	r0, #1
 800050c:	d10c      	bne.n	8000528 <BSP_LED_Init+0x68>
 800050e:	2300      	movs	r3, #0
 8000510:	9302      	str	r3, [sp, #8]
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <BSP_LED_Init+0xa4>)
 8000514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000516:	f042 0208 	orr.w	r2, r2, #8
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0308 	and.w	r3, r3, #8
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	9b02      	ldr	r3, [sp, #8]
 8000526:	e7d9      	b.n	80004dc <BSP_LED_Init+0x1c>
 8000528:	2802      	cmp	r0, #2
 800052a:	d10c      	bne.n	8000546 <BSP_LED_Init+0x86>
 800052c:	2300      	movs	r3, #0
 800052e:	9303      	str	r3, [sp, #12]
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <BSP_LED_Init+0xa4>)
 8000532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000534:	f042 0208 	orr.w	r2, r2, #8
 8000538:	631a      	str	r2, [r3, #48]	; 0x30
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	9303      	str	r3, [sp, #12]
 8000542:	9b03      	ldr	r3, [sp, #12]
 8000544:	e7ca      	b.n	80004dc <BSP_LED_Init+0x1c>
 8000546:	2803      	cmp	r0, #3
 8000548:	d1c8      	bne.n	80004dc <BSP_LED_Init+0x1c>
 800054a:	2300      	movs	r3, #0
 800054c:	9304      	str	r3, [sp, #16]
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <BSP_LED_Init+0xa4>)
 8000550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000552:	f042 0208 	orr.w	r2, r2, #8
 8000556:	631a      	str	r2, [r3, #48]	; 0x30
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	9304      	str	r3, [sp, #16]
 8000560:	9b04      	ldr	r3, [sp, #16]
 8000562:	e7bb      	b.n	80004dc <BSP_LED_Init+0x1c>
 8000564:	40023800 	.word	0x40023800
 8000568:	20000000 	.word	0x20000000
 800056c:	08001738 	.word	0x08001738

08000570 <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <BSP_LED_On+0x14>)
 8000572:	4905      	ldr	r1, [pc, #20]	; (8000588 <BSP_LED_On+0x18>)
 8000574:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000578:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 800057c:	6858      	ldr	r0, [r3, #4]
 800057e:	2201      	movs	r2, #1
 8000580:	f000 ba14 	b.w	80009ac <HAL_GPIO_WritePin>
 8000584:	20000000 	.word	0x20000000
 8000588:	08001738 	.word	0x08001738

0800058c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	490f      	ldr	r1, [pc, #60]	; (80005cc <SystemInit+0x40>)
 800058e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <SystemInit+0x44>)
 800059c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800059e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80005a0:	f042 0201 	orr.w	r2, r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <SystemInit+0x48>)
 80005b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005c6:	608b      	str	r3, [r1, #8]
#endif
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	40023800 	.word	0x40023800
 80005d4:	24003010 	.word	0x24003010

080005d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d8:	4770      	bx	lr
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_InitTick+0x3c>)
 80005e0:	4e0e      	ldr	r6, [pc, #56]	; (800061c <HAL_InitTick+0x40>)
{
 80005e2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	7830      	ldrb	r0, [r6, #0]
 80005ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80005ee:	6810      	ldr	r0, [r2, #0]
 80005f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f4:	f000 f894 	bl	8000720 <HAL_SYSTICK_Config>
 80005f8:	4604      	mov	r4, r0
 80005fa:	b950      	cbnz	r0, 8000612 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	2d0f      	cmp	r5, #15
 80005fe:	d808      	bhi.n	8000612 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	4602      	mov	r2, r0
 8000602:	4629      	mov	r1, r5
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f84a 	bl	80006a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	6075      	str	r5, [r6, #4]
 800060e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000610:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
 8000614:	e7fc      	b.n	8000610 <HAL_InitTick+0x34>
 8000616:	bf00      	nop
 8000618:	2000001c 	.word	0x2000001c
 800061c:	20000020 	.word	0x20000020

08000620 <HAL_Init>:
{
 8000620:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_Init+0x28>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800062a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000632:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f821 	bl	800067c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	200f      	movs	r0, #15
 800063c:	f7ff ffce 	bl	80005dc <HAL_InitTick>
  HAL_MspInit();
 8000640:	f7ff ffca 	bl	80005d8 <HAL_MspInit>
}
 8000644:	2000      	movs	r0, #0
 8000646:	bd08      	pop	{r3, pc}
 8000648:	40023c00 	.word	0x40023c00

0800064c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_IncTick+0x10>)
 800064e:	4b04      	ldr	r3, [pc, #16]	; (8000660 <HAL_IncTick+0x14>)
 8000650:	6811      	ldr	r1, [r2, #0]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	440b      	add	r3, r1
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000058 	.word	0x20000058
 8000660:	20000020 	.word	0x20000020

08000664 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000664:	4b01      	ldr	r3, [pc, #4]	; (800066c <HAL_GetTick+0x8>)
 8000666:	6818      	ldr	r0, [r3, #0]
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000058 	.word	0x20000058

08000670 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8000670:	4b01      	ldr	r3, [pc, #4]	; (8000678 <HAL_GetREVID+0x8>)
 8000672:	6818      	ldr	r0, [r3, #0]
}
 8000674:	0c00      	lsrs	r0, r0, #16
 8000676:	4770      	bx	lr
 8000678:	e0042000 	.word	0xe0042000

0800067c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000680:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000684:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000698:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006a2:	b530      	push	{r4, r5, lr}
 80006a4:	68dc      	ldr	r4, [r3, #12]
 80006a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006aa:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	2d04      	cmp	r5, #4
 80006b2:	bf28      	it	cs
 80006b4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006bc:	bf8c      	ite	hi
 80006be:	3c03      	subhi	r4, #3
 80006c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c2:	fa03 f505 	lsl.w	r5, r3, r5
 80006c6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	40a3      	lsls	r3, r4
 80006cc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	bfac      	ite	ge
 80006da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	4a08      	ldrlt	r2, [pc, #32]	; (8000700 <HAL_NVIC_SetPriority+0x60>)
 80006e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80006e4:	bfb8      	it	lt
 80006e6:	f000 000f 	andlt.w	r0, r0, #15
 80006ea:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfaa      	itet	ge
 80006ee:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000704:	2800      	cmp	r0, #0
 8000706:	db08      	blt.n	800071a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000708:	0942      	lsrs	r2, r0, #5
 800070a:	2301      	movs	r3, #1
 800070c:	f000 001f 	and.w	r0, r0, #31
 8000710:	fa03 f000 	lsl.w	r0, r3, r0
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <HAL_NVIC_EnableIRQ+0x18>)
 8000716:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100

08000720 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	3801      	subs	r0, #1
 8000722:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000726:	d20a      	bcs.n	800073e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000750:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000752:	f7ff ff87 	bl	8000664 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000756:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800075a:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 800075c:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800075e:	d006      	beq.n	800076e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000764:	2300      	movs	r3, #0
 8000766:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 800076a:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 800076c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	f022 0216 	bic.w	r2, r2, #22
 8000776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000778:	695a      	ldr	r2, [r3, #20]
 800077a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800077e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000780:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000782:	b90a      	cbnz	r2, 8000788 <HAL_DMA_Abort+0x3c>
 8000784:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000786:	b11a      	cbz	r2, 8000790 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	f022 0208 	bic.w	r2, r2, #8
 800078e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	f022 0201 	bic.w	r2, r2, #1
 8000796:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f013 0301 	ands.w	r3, r3, #1
 80007a0:	d10a      	bne.n	80007b8 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80007a4:	223f      	movs	r2, #63	; 0x3f
 80007a6:	408a      	lsls	r2, r1
 80007a8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80007aa:	2201      	movs	r2, #1
 80007ac:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80007b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80007b4:	4618      	mov	r0, r3
 80007b6:	e7d9      	b.n	800076c <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007b8:	f7ff ff54 	bl	8000664 <HAL_GetTick>
 80007bc:	1b40      	subs	r0, r0, r5
 80007be:	2805      	cmp	r0, #5
 80007c0:	d9ea      	bls.n	8000798 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80007c2:	2320      	movs	r3, #32
 80007c4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80007c6:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80007c8:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80007ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80007ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80007d2:	e7cb      	b.n	800076c <HAL_DMA_Abort+0x20>

080007d4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d003      	beq.n	80007e4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
 80007e2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007e4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80007e6:	2305      	movs	r3, #5
 80007e8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80007ec:	6813      	ldr	r3, [r2, #0]
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80007f4:	2000      	movs	r0, #0
}
 80007f6:	4770      	bx	lr

080007f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80009a8 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000800:	4a67      	ldr	r2, [pc, #412]	; (80009a0 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000802:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000804:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000806:	2401      	movs	r4, #1
 8000808:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800080e:	43ac      	bics	r4, r5
 8000810:	f040 80b1 	bne.w	8000976 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000814:	684d      	ldr	r5, [r1, #4]
 8000816:	f005 0403 	and.w	r4, r5, #3
 800081a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800081e:	2603      	movs	r6, #3
 8000820:	1e67      	subs	r7, r4, #1
 8000822:	fa06 f608 	lsl.w	r6, r6, r8
 8000826:	2f01      	cmp	r7, #1
 8000828:	ea6f 0606 	mvn.w	r6, r6
 800082c:	d834      	bhi.n	8000898 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800082e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000830:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000834:	68cf      	ldr	r7, [r1, #12]
 8000836:	fa07 f708 	lsl.w	r7, r7, r8
 800083a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800083e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000840:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000842:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000846:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800084a:	409f      	lsls	r7, r3
 800084c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000850:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000852:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000854:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000858:	688f      	ldr	r7, [r1, #8]
 800085a:	fa07 f708 	lsl.w	r7, r7, r8
 800085e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000862:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000864:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000866:	d119      	bne.n	800089c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000868:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800086c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000870:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000874:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000878:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800087c:	f04f 0e0f 	mov.w	lr, #15
 8000880:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000884:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000888:	690f      	ldr	r7, [r1, #16]
 800088a:	fa07 f70b 	lsl.w	r7, r7, fp
 800088e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000892:	f8ca 7020 	str.w	r7, [sl, #32]
 8000896:	e001      	b.n	800089c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000898:	2c03      	cmp	r4, #3
 800089a:	d1da      	bne.n	8000852 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800089c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800089e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008a4:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008a6:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80008aa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008ac:	d063      	beq.n	8000976 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	f04f 0a00 	mov.w	sl, #0
 80008b2:	f8cd a004 	str.w	sl, [sp, #4]
 80008b6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ba:	4c3a      	ldr	r4, [pc, #232]	; (80009a4 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008bc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80008c0:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80008c4:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80008c8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80008cc:	9601      	str	r6, [sp, #4]
 80008ce:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80008d0:	f023 0603 	bic.w	r6, r3, #3
 80008d4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80008d8:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008dc:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80008e0:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008e8:	270f      	movs	r7, #15
 80008ea:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ee:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008f0:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f4:	d046      	beq.n	8000984 <HAL_GPIO_Init+0x18c>
 80008f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008fa:	42a0      	cmp	r0, r4
 80008fc:	d044      	beq.n	8000988 <HAL_GPIO_Init+0x190>
 80008fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000902:	42a0      	cmp	r0, r4
 8000904:	d042      	beq.n	800098c <HAL_GPIO_Init+0x194>
 8000906:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800090a:	42a0      	cmp	r0, r4
 800090c:	d040      	beq.n	8000990 <HAL_GPIO_Init+0x198>
 800090e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000912:	42a0      	cmp	r0, r4
 8000914:	d03e      	beq.n	8000994 <HAL_GPIO_Init+0x19c>
 8000916:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800091a:	42a0      	cmp	r0, r4
 800091c:	d03c      	beq.n	8000998 <HAL_GPIO_Init+0x1a0>
 800091e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000922:	42a0      	cmp	r0, r4
 8000924:	d03a      	beq.n	800099c <HAL_GPIO_Init+0x1a4>
 8000926:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800092a:	42a0      	cmp	r0, r4
 800092c:	bf0c      	ite	eq
 800092e:	2407      	moveq	r4, #7
 8000930:	2408      	movne	r4, #8
 8000932:	fa04 f40e 	lsl.w	r4, r4, lr
 8000936:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000938:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800093a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800093c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000940:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000942:	bf54      	ite	pl
 8000944:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000946:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800094a:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 800094c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800094e:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000950:	bf54      	ite	pl
 8000952:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000954:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000958:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800095a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800095c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800095e:	bf54      	ite	pl
 8000960:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000962:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000966:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000968:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800096a:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800096c:	bf54      	ite	pl
 800096e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000970:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000974:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000976:	3301      	adds	r3, #1
 8000978:	2b10      	cmp	r3, #16
 800097a:	f47f af43 	bne.w	8000804 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800097e:	b003      	add	sp, #12
 8000980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000984:	4654      	mov	r4, sl
 8000986:	e7d4      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 8000988:	2401      	movs	r4, #1
 800098a:	e7d2      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 800098c:	2402      	movs	r4, #2
 800098e:	e7d0      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 8000990:	2403      	movs	r4, #3
 8000992:	e7ce      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 8000994:	2404      	movs	r4, #4
 8000996:	e7cc      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 8000998:	2405      	movs	r4, #5
 800099a:	e7ca      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 800099c:	2406      	movs	r4, #6
 800099e:	e7c8      	b.n	8000932 <HAL_GPIO_Init+0x13a>
 80009a0:	40013c00 	.word	0x40013c00
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009ac:	b10a      	cbz	r2, 80009b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009ae:	6181      	str	r1, [r0, #24]
  }
}
 80009b0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009b2:	0409      	lsls	r1, r1, #16
 80009b4:	e7fb      	b.n	80009ae <HAL_GPIO_WritePin+0x2>
	...

080009b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009bc:	4604      	mov	r4, r0
 80009be:	b340      	cbz	r0, 8000a12 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c0:	6803      	ldr	r3, [r0, #0]
 80009c2:	07dd      	lsls	r5, r3, #31
 80009c4:	d410      	bmi.n	80009e8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	0798      	lsls	r0, r3, #30
 80009ca:	d45e      	bmi.n	8000a8a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	071a      	lsls	r2, r3, #28
 80009d0:	f100 80a0 	bmi.w	8000b14 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	075b      	lsls	r3, r3, #29
 80009d8:	f100 80be 	bmi.w	8000b58 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009dc:	69a0      	ldr	r0, [r4, #24]
 80009de:	2800      	cmp	r0, #0
 80009e0:	f040 811f 	bne.w	8000c22 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80009e4:	2000      	movs	r0, #0
 80009e6:	e02b      	b.n	8000a40 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009e8:	4ba6      	ldr	r3, [pc, #664]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	f002 020c 	and.w	r2, r2, #12
 80009f0:	2a04      	cmp	r2, #4
 80009f2:	d007      	beq.n	8000a04 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009fa:	2a08      	cmp	r2, #8
 80009fc:	d10b      	bne.n	8000a16 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	0251      	lsls	r1, r2, #9
 8000a02:	d508      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a04:	4b9f      	ldr	r3, [pc, #636]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	039a      	lsls	r2, r3, #14
 8000a0a:	d5dc      	bpl.n	80009c6 <HAL_RCC_OscConfig+0xe>
 8000a0c:	6863      	ldr	r3, [r4, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1d9      	bne.n	80009c6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
 8000a14:	e014      	b.n	8000a40 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a16:	6862      	ldr	r2, [r4, #4]
 8000a18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a1c:	d113      	bne.n	8000a46 <HAL_RCC_OscConfig+0x8e>
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a26:	f7ff fe1d 	bl	8000664 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2a:	4e96      	ldr	r6, [pc, #600]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000a2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2e:	6833      	ldr	r3, [r6, #0]
 8000a30:	039b      	lsls	r3, r3, #14
 8000a32:	d4c8      	bmi.n	80009c6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a34:	f7ff fe16 	bl	8000664 <HAL_GetTick>
 8000a38:	1b40      	subs	r0, r0, r5
 8000a3a:	2864      	cmp	r0, #100	; 0x64
 8000a3c:	d9f7      	bls.n	8000a2e <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
}
 8000a40:	b002      	add	sp, #8
 8000a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a46:	4d8f      	ldr	r5, [pc, #572]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000a48:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	d107      	bne.n	8000a60 <HAL_RCC_OscConfig+0xa8>
 8000a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a54:	602b      	str	r3, [r5, #0]
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a5e:	e7e2      	b.n	8000a26 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a64:	602b      	str	r3, [r5, #0]
 8000a66:	682b      	ldr	r3, [r5, #0]
 8000a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6c:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d1d9      	bne.n	8000a26 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8000a72:	f7ff fdf7 	bl	8000664 <HAL_GetTick>
 8000a76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	039f      	lsls	r7, r3, #14
 8000a7c:	d5a3      	bpl.n	80009c6 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fdf1 	bl	8000664 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2864      	cmp	r0, #100	; 0x64
 8000a86:	d9f7      	bls.n	8000a78 <HAL_RCC_OscConfig+0xc0>
 8000a88:	e7d9      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a8a:	4b7e      	ldr	r3, [pc, #504]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f012 0f0c 	tst.w	r2, #12
 8000a92:	d007      	beq.n	8000aa4 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a9a:	2a08      	cmp	r2, #8
 8000a9c:	d111      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	025e      	lsls	r6, r3, #9
 8000aa2:	d40e      	bmi.n	8000ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aa4:	4b77      	ldr	r3, [pc, #476]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	0795      	lsls	r5, r2, #30
 8000aaa:	d502      	bpl.n	8000ab2 <HAL_RCC_OscConfig+0xfa>
 8000aac:	68e2      	ldr	r2, [r4, #12]
 8000aae:	2a01      	cmp	r2, #1
 8000ab0:	d1af      	bne.n	8000a12 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	6921      	ldr	r1, [r4, #16]
 8000ab6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000aba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000abe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac0:	e784      	b.n	80009cc <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ac2:	68e2      	ldr	r2, [r4, #12]
 8000ac4:	4b70      	ldr	r3, [pc, #448]	; (8000c88 <HAL_RCC_OscConfig+0x2d0>)
 8000ac6:	b1b2      	cbz	r2, 8000af6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000acc:	f7ff fdca 	bl	8000664 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad0:	4d6c      	ldr	r5, [pc, #432]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000ad2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	0798      	lsls	r0, r3, #30
 8000ad8:	d507      	bpl.n	8000aea <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	6922      	ldr	r2, [r4, #16]
 8000ade:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ae2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ae6:	602b      	str	r3, [r5, #0]
 8000ae8:	e770      	b.n	80009cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aea:	f7ff fdbb 	bl	8000664 <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9ef      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x11c>
 8000af4:	e7a3      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000af6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000af8:	f7ff fdb4 	bl	8000664 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afc:	4e61      	ldr	r6, [pc, #388]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000afe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b00:	6833      	ldr	r3, [r6, #0]
 8000b02:	0799      	lsls	r1, r3, #30
 8000b04:	f57f af62 	bpl.w	80009cc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b08:	f7ff fdac 	bl	8000664 <HAL_GetTick>
 8000b0c:	1b40      	subs	r0, r0, r5
 8000b0e:	2802      	cmp	r0, #2
 8000b10:	d9f6      	bls.n	8000b00 <HAL_RCC_OscConfig+0x148>
 8000b12:	e794      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b14:	6962      	ldr	r2, [r4, #20]
 8000b16:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <HAL_RCC_OscConfig+0x2d4>)
 8000b18:	b17a      	cbz	r2, 8000b3a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fda1 	bl	8000664 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b22:	4e58      	ldr	r6, [pc, #352]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000b24:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b26:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b28:	079f      	lsls	r7, r3, #30
 8000b2a:	f53f af53 	bmi.w	80009d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fd99 	bl	8000664 <HAL_GetTick>
 8000b32:	1b40      	subs	r0, r0, r5
 8000b34:	2802      	cmp	r0, #2
 8000b36:	d9f6      	bls.n	8000b26 <HAL_RCC_OscConfig+0x16e>
 8000b38:	e781      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000b3a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b3c:	f7ff fd92 	bl	8000664 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b40:	4e50      	ldr	r6, [pc, #320]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000b42:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b44:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000b46:	0798      	lsls	r0, r3, #30
 8000b48:	f57f af44 	bpl.w	80009d4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fd8a 	bl	8000664 <HAL_GetTick>
 8000b50:	1b40      	subs	r0, r0, r5
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f6      	bls.n	8000b44 <HAL_RCC_OscConfig+0x18c>
 8000b56:	e772      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b58:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000b60:	d128      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b76:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b78:	4d45      	ldr	r5, [pc, #276]	; (8000c90 <HAL_RCC_OscConfig+0x2d8>)
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	05d9      	lsls	r1, r3, #23
 8000b7e:	d51b      	bpl.n	8000bb8 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b80:	68a3      	ldr	r3, [r4, #8]
 8000b82:	4d40      	ldr	r5, [pc, #256]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d127      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x220>
 8000b88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000b90:	f7ff fd68 	bl	8000664 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b94:	4e3b      	ldr	r6, [pc, #236]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000b96:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b98:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b9c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b9e:	079b      	lsls	r3, r3, #30
 8000ba0:	d539      	bpl.n	8000c16 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8000ba2:	2f00      	cmp	r7, #0
 8000ba4:	f43f af1a 	beq.w	80009dc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000baa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	e713      	b.n	80009dc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	e7df      	b.n	8000b78 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000bc0:	f7ff fd50 	bl	8000664 <HAL_GetTick>
 8000bc4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	05da      	lsls	r2, r3, #23
 8000bca:	d4d9      	bmi.n	8000b80 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bcc:	f7ff fd4a 	bl	8000664 <HAL_GetTick>
 8000bd0:	1b80      	subs	r0, r0, r6
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9f7      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x20e>
 8000bd6:	e732      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	d104      	bne.n	8000be6 <HAL_RCC_OscConfig+0x22e>
 8000bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	672b      	str	r3, [r5, #112]	; 0x70
 8000be4:	e7d0      	b.n	8000b88 <HAL_RCC_OscConfig+0x1d0>
 8000be6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000be8:	f022 0201 	bic.w	r2, r2, #1
 8000bec:	672a      	str	r2, [r5, #112]	; 0x70
 8000bee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000bf0:	f022 0204 	bic.w	r2, r2, #4
 8000bf4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1ca      	bne.n	8000b90 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8000bfa:	f7ff fd33 	bl	8000664 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bfe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000c02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c06:	0798      	lsls	r0, r3, #30
 8000c08:	d5cb      	bpl.n	8000ba2 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fd2b 	bl	8000664 <HAL_GetTick>
 8000c0e:	1b80      	subs	r0, r0, r6
 8000c10:	4540      	cmp	r0, r8
 8000c12:	d9f7      	bls.n	8000c04 <HAL_RCC_OscConfig+0x24c>
 8000c14:	e713      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c16:	f7ff fd25 	bl	8000664 <HAL_GetTick>
 8000c1a:	1b40      	subs	r0, r0, r5
 8000c1c:	4540      	cmp	r0, r8
 8000c1e:	d9bd      	bls.n	8000b9c <HAL_RCC_OscConfig+0x1e4>
 8000c20:	e70d      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000c22:	4d18      	ldr	r5, [pc, #96]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
 8000c24:	68ab      	ldr	r3, [r5, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d047      	beq.n	8000cbe <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c2e:	4e19      	ldr	r6, [pc, #100]	; (8000c94 <HAL_RCC_OscConfig+0x2dc>)
 8000c30:	2300      	movs	r3, #0
 8000c32:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000c34:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c36:	d135      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000c38:	f7ff fd14 	bl	8000664 <HAL_GetTick>
 8000c3c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	0199      	lsls	r1, r3, #6
 8000c42:	d429      	bmi.n	8000c98 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c44:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c4c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c58:	0852      	lsrs	r2, r2, #1
 8000c5a:	3a01      	subs	r2, #1
 8000c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c60:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c62:	2301      	movs	r3, #1
 8000c64:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c66:	f7ff fcfd 	bl	8000664 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c6a:	4d06      	ldr	r5, [pc, #24]	; (8000c84 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000c6c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	019a      	lsls	r2, r3, #6
 8000c72:	f53f aeb7 	bmi.w	80009e4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c76:	f7ff fcf5 	bl	8000664 <HAL_GetTick>
 8000c7a:	1b00      	subs	r0, r0, r4
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d9f6      	bls.n	8000c6e <HAL_RCC_OscConfig+0x2b6>
 8000c80:	e6dd      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	42470000 	.word	0x42470000
 8000c8c:	42470e80 	.word	0x42470e80
 8000c90:	40007000 	.word	0x40007000
 8000c94:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c98:	f7ff fce4 	bl	8000664 <HAL_GetTick>
 8000c9c:	1bc0      	subs	r0, r0, r7
 8000c9e:	2802      	cmp	r0, #2
 8000ca0:	d9cd      	bls.n	8000c3e <HAL_RCC_OscConfig+0x286>
 8000ca2:	e6cc      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fcde 	bl	8000664 <HAL_GetTick>
 8000ca8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	f57f ae99 	bpl.w	80009e4 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb2:	f7ff fcd7 	bl	8000664 <HAL_GetTick>
 8000cb6:	1b00      	subs	r0, r0, r4
 8000cb8:	2802      	cmp	r0, #2
 8000cba:	d9f6      	bls.n	8000caa <HAL_RCC_OscConfig+0x2f2>
 8000cbc:	e6bf      	b.n	8000a3e <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cbe:	2801      	cmp	r0, #1
 8000cc0:	f43f aebe 	beq.w	8000a40 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000cc4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cc6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cc8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ccc:	4291      	cmp	r1, r2
 8000cce:	f47f aea0 	bne.w	8000a12 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000cd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	f47f ae9a 	bne.w	8000a12 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000cde:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000ce0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000cea:	f47f ae92 	bne.w	8000a12 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000cee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cf0:	0852      	lsrs	r2, r2, #1
 8000cf2:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000cf6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000cf8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000cfc:	f47f ae89 	bne.w	8000a12 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000d00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d02:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d06:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000d0a:	f43f ae6b 	beq.w	80009e4 <HAL_RCC_OscConfig+0x2c>
 8000d0e:	e680      	b.n	8000a12 <HAL_RCC_OscConfig+0x5a>

08000d10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d10:	4913      	ldr	r1, [pc, #76]	; (8000d60 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000d12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d14:	688b      	ldr	r3, [r1, #8]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d01c      	beq.n	8000d58 <HAL_RCC_GetSysClockFreq+0x48>
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d11c      	bne.n	8000d5c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d22:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d24:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d26:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d28:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d2c:	bf14      	ite	ne
 8000d2e:	480d      	ldrne	r0, [pc, #52]	; (8000d64 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d30:	480d      	ldreq	r0, [pc, #52]	; (8000d68 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d32:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d36:	bf18      	it	ne
 8000d38:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d3e:	fba1 0100 	umull	r0, r1, r1, r0
 8000d42:	f7ff fa41 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_RCC_GetSysClockFreq+0x50>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d4e:	3301      	adds	r3, #1
 8000d50:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d52:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d56:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <HAL_RCC_GetSysClockFreq+0x54>)
 8000d5a:	e7fc      	b.n	8000d56 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000d5e:	e7fa      	b.n	8000d56 <HAL_RCC_GetSysClockFreq+0x46>
 8000d60:	40023800 	.word	0x40023800
 8000d64:	007a1200 	.word	0x007a1200
 8000d68:	00f42400 	.word	0x00f42400

08000d6c <HAL_RCC_ClockConfig>:
{
 8000d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d70:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d72:	4604      	mov	r4, r0
 8000d74:	b910      	cbnz	r0, 8000d7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
}
 8000d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <HAL_RCC_ClockConfig+0x124>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	f002 0207 	and.w	r2, r2, #7
 8000d84:	428a      	cmp	r2, r1
 8000d86:	d328      	bcc.n	8000dda <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d88:	6822      	ldr	r2, [r4, #0]
 8000d8a:	0797      	lsls	r7, r2, #30
 8000d8c:	d42d      	bmi.n	8000dea <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d8e:	07d0      	lsls	r0, r2, #31
 8000d90:	d441      	bmi.n	8000e16 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d92:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <HAL_RCC_ClockConfig+0x124>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	f002 0207 	and.w	r2, r2, #7
 8000d9a:	42aa      	cmp	r2, r5
 8000d9c:	d866      	bhi.n	8000e6c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d9e:	6822      	ldr	r2, [r4, #0]
 8000da0:	0751      	lsls	r1, r2, #29
 8000da2:	d46c      	bmi.n	8000e7e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da4:	0713      	lsls	r3, r2, #28
 8000da6:	d507      	bpl.n	8000db8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000da8:	4a3a      	ldr	r2, [pc, #232]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000daa:	6921      	ldr	r1, [r4, #16]
 8000dac:	6893      	ldr	r3, [r2, #8]
 8000dae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000db2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000db6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000db8:	f7ff ffaa 	bl	8000d10 <HAL_RCC_GetSysClockFreq>
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000dbe:	4a36      	ldr	r2, [pc, #216]	; (8000e98 <HAL_RCC_ClockConfig+0x12c>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	40d8      	lsrs	r0, r3
 8000dca:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <HAL_RCC_ClockConfig+0x130>)
 8000dcc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000dce:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <HAL_RCC_ClockConfig+0x134>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	f7ff fc03 	bl	80005dc <HAL_InitTick>
  return HAL_OK;
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	e7ce      	b.n	8000d78 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1c6      	bne.n	8000d76 <HAL_RCC_ClockConfig+0xa>
 8000de8:	e7ce      	b.n	8000d88 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000dec:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000df0:	bf1e      	ittt	ne
 8000df2:	6899      	ldrne	r1, [r3, #8]
 8000df4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000df8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dfa:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000dfc:	bf42      	ittt	mi
 8000dfe:	6899      	ldrmi	r1, [r3, #8]
 8000e00:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000e04:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e06:	4923      	ldr	r1, [pc, #140]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000e08:	68a0      	ldr	r0, [r4, #8]
 8000e0a:	688b      	ldr	r3, [r1, #8]
 8000e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e10:	4303      	orrs	r3, r0
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e7bb      	b.n	8000d8e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e16:	6862      	ldr	r2, [r4, #4]
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000e1a:	2a01      	cmp	r2, #1
 8000e1c:	d11c      	bne.n	8000e58 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e24:	d0a7      	beq.n	8000d76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e26:	4e1b      	ldr	r6, [pc, #108]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000e28:	68b3      	ldr	r3, [r6, #8]
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e32:	f7ff fc17 	bl	8000664 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e36:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e3a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e3c:	68b3      	ldr	r3, [r6, #8]
 8000e3e:	6862      	ldr	r2, [r4, #4]
 8000e40:	f003 030c 	and.w	r3, r3, #12
 8000e44:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e48:	d0a3      	beq.n	8000d92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e4a:	f7ff fc0b 	bl	8000664 <HAL_GetTick>
 8000e4e:	1bc0      	subs	r0, r0, r7
 8000e50:	4540      	cmp	r0, r8
 8000e52:	d9f3      	bls.n	8000e3c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e78f      	b.n	8000d78 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e58:	1e91      	subs	r1, r2, #2
 8000e5a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e5c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e5e:	d802      	bhi.n	8000e66 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e64:	e7de      	b.n	8000e24 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e66:	f013 0f02 	tst.w	r3, #2
 8000e6a:	e7db      	b.n	8000e24 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6c:	b2ea      	uxtb	r2, r5
 8000e6e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	42ab      	cmp	r3, r5
 8000e78:	f47f af7d 	bne.w	8000d76 <HAL_RCC_ClockConfig+0xa>
 8000e7c:	e78f      	b.n	8000d9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e7e:	4905      	ldr	r1, [pc, #20]	; (8000e94 <HAL_RCC_ClockConfig+0x128>)
 8000e80:	68e0      	ldr	r0, [r4, #12]
 8000e82:	688b      	ldr	r3, [r1, #8]
 8000e84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e88:	4303      	orrs	r3, r0
 8000e8a:	608b      	str	r3, [r1, #8]
 8000e8c:	e78a      	b.n	8000da4 <HAL_RCC_ClockConfig+0x38>
 8000e8e:	bf00      	nop
 8000e90:	40023c00 	.word	0x40023c00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	08001744 	.word	0x08001744
 8000e9c:	2000001c 	.word	0x2000001c
 8000ea0:	20000024 	.word	0x20000024

08000ea4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eb2:	6810      	ldr	r0, [r2, #0]
}
 8000eb4:	40d8      	lsrs	r0, r3
 8000eb6:	4770      	bx	lr
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	08001754 	.word	0x08001754
 8000ec0:	2000001c 	.word	0x2000001c

08000ec4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ed2:	6810      	ldr	r0, [r2, #0]
}
 8000ed4:	40d8      	lsrs	r0, r3
 8000ed6:	4770      	bx	lr
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	08001754 	.word	0x08001754
 8000ee0:	2000001c 	.word	0x2000001c

08000ee4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000ee4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ee6:	f102 030c 	add.w	r3, r2, #12
 8000eea:	e853 3f00 	ldrex	r3, [r3]
 8000eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ef2:	320c      	adds	r2, #12
 8000ef4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8000ef8:	6802      	ldr	r2, [r0, #0]
 8000efa:	2900      	cmp	r1, #0
 8000efc:	d1f2      	bne.n	8000ee4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000efe:	f102 0314 	add.w	r3, r2, #20
 8000f02:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f0a:	f102 0c14 	add.w	ip, r2, #20
 8000f0e:	e84c 3100 	strex	r1, r3, [ip]
 8000f12:	2900      	cmp	r1, #0
 8000f14:	d1f3      	bne.n	8000efe <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000f16:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10b      	bne.n	8000f34 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f1c:	f102 030c 	add.w	r3, r2, #12
 8000f20:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000f24:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f28:	f102 0c0c 	add.w	ip, r2, #12
 8000f2c:	e84c 3100 	strex	r1, r3, [ip]
 8000f30:	2900      	cmp	r1, #0
 8000f32:	d1f3      	bne.n	8000f1c <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f34:	2320      	movs	r3, #32
 8000f36:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	6303      	str	r3, [r0, #48]	; 0x30
}
 8000f3e:	4770      	bx	lr

08000f40 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f40:	6802      	ldr	r2, [r0, #0]
 8000f42:	68c1      	ldr	r1, [r0, #12]
{
 8000f44:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f46:	6913      	ldr	r3, [r2, #16]
 8000f48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6113      	str	r3, [r2, #16]
{
 8000f50:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f52:	6883      	ldr	r3, [r0, #8]
 8000f54:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f56:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f58:	4303      	orrs	r3, r0
 8000f5a:	6968      	ldr	r0, [r5, #20]
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8000f60:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8000f64:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f68:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f6e:	6953      	ldr	r3, [r2, #20]
 8000f70:	69a9      	ldr	r1, [r5, #24]
 8000f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <UART_SetConfig+0xb8>)
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d003      	beq.n	8000f88 <UART_SetConfig+0x48>
 8000f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d124      	bne.n	8000fd2 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f88:	f7ff ff9c 	bl	8000ec4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f8c:	69ea      	ldr	r2, [r5, #28]
 8000f8e:	2319      	movs	r3, #25
 8000f90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f94:	fba0 0103 	umull	r0, r1, r0, r3
 8000f98:	e9d5 4300 	ldrd	r4, r3, [r5]
 8000f9c:	d11c      	bne.n	8000fd8 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	1892      	adds	r2, r2, r2
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	415b      	adcs	r3, r3
 8000fa8:	f7ff f90e 	bl	80001c8 <__aeabi_uldivmod>
 8000fac:	2164      	movs	r1, #100	; 0x64
 8000fae:	fbb0 f5f1 	udiv	r5, r0, r1
 8000fb2:	fb01 0315 	mls	r3, r1, r5, r0
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	3332      	adds	r3, #50	; 0x32
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	f003 0207 	and.w	r2, r3, #7
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8000fc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000fcc:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fce:	60a3      	str	r3, [r4, #8]
  }
}
 8000fd0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000fd2:	f7ff ff67 	bl	8000ea4 <HAL_RCC_GetPCLK1Freq>
 8000fd6:	e7d9      	b.n	8000f8c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fd8:	009a      	lsls	r2, r3, #2
 8000fda:	0f9b      	lsrs	r3, r3, #30
 8000fdc:	f7ff f8f4 	bl	80001c8 <__aeabi_uldivmod>
 8000fe0:	2264      	movs	r2, #100	; 0x64
 8000fe2:	fbb0 f1f2 	udiv	r1, r0, r2
 8000fe6:	fb02 0311 	mls	r3, r2, r1, r0
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	3332      	adds	r3, #50	; 0x32
 8000fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ff2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000ff6:	e7ea      	b.n	8000fce <UART_SetConfig+0x8e>
 8000ff8:	40011000 	.word	0x40011000

08000ffc <HAL_UART_Init>:
{
 8000ffc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000ffe:	4604      	mov	r4, r0
 8001000:	b340      	cbz	r0, 8001054 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001002:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001006:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800100a:	b91b      	cbnz	r3, 8001014 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800100c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001010:	f000 fb0e 	bl	8001630 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001014:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001016:	2324      	movs	r3, #36	; 0x24
 8001018:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800101c:	68d3      	ldr	r3, [r2, #12]
 800101e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001022:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001024:	4620      	mov	r0, r4
 8001026:	f7ff ff8b 	bl	8000f40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	691a      	ldr	r2, [r3, #16]
 800102e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001032:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800103a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001042:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001044:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001046:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001048:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800104a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800104e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001052:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	e7fc      	b.n	8001052 <HAL_UART_Init+0x56>

08001058 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8001058:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800105c:	2b20      	cmp	r3, #32
 800105e:	d118      	bne.n	8001092 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8001060:	b1a9      	cbz	r1, 800108e <HAL_UART_Transmit_IT+0x36>
 8001062:	b1a2      	cbz	r2, 800108e <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8001064:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001068:	2b01      	cmp	r3, #1
 800106a:	d012      	beq.n	8001092 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 800106c:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 800106e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8001070:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001072:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001074:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001076:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001078:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(huart);
 800107a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800107e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001082:	68ca      	ldr	r2, [r1, #12]
 8001084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001088:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 800108a:	4618      	mov	r0, r3
 800108c:	4770      	bx	lr
      return HAL_ERROR;
 800108e:	2001      	movs	r0, #1
 8001090:	4770      	bx	lr
    return HAL_BUSY;
 8001092:	2002      	movs	r0, #2
}
 8001094:	4770      	bx	lr

08001096 <UART_DMAAbortOnError>:
{
 8001096:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001098:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800109e:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80010a0:	f000 fac2 	bl	8001628 <HAL_UART_ErrorCallback>
}
 80010a4:	bd08      	pop	{r3, pc}

080010a6 <HAL_UARTEx_RxEventCallback>:
}
 80010a6:	4770      	bx	lr

080010a8 <UART_Receive_IT>:
{
 80010a8:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80010aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80010ae:	2b22      	cmp	r3, #34	; 0x22
 80010b0:	d153      	bne.n	800115a <UART_Receive_IT+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010b2:	6881      	ldr	r1, [r0, #8]
 80010b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010b6:	6802      	ldr	r2, [r0, #0]
 80010b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80010bc:	d13d      	bne.n	800113a <UART_Receive_IT+0x92>
 80010be:	6901      	ldr	r1, [r0, #16]
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d13d      	bne.n	8001140 <UART_Receive_IT+0x98>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010ca:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 80010ce:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 80010d0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80010d2:	3c01      	subs	r4, #1
 80010d4:	b2a4      	uxth	r4, r4
 80010d6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80010d8:	2c00      	cmp	r4, #0
 80010da:	d12c      	bne.n	8001136 <UART_Receive_IT+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80010dc:	6803      	ldr	r3, [r0, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	f022 0220 	bic.w	r2, r2, #32
 80010e4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010ec:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80010f6:	2320      	movs	r3, #32
 80010f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80010fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010fe:	2b01      	cmp	r3, #1
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	d127      	bne.n	8001154 <UART_Receive_IT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001104:	6304      	str	r4, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001106:	f103 020c 	add.w	r2, r3, #12
 800110a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800110e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001112:	f103 040c 	add.w	r4, r3, #12
 8001116:	e844 2100 	strex	r1, r2, [r4]
 800111a:	2900      	cmp	r1, #0
 800111c:	d1f3      	bne.n	8001106 <UART_Receive_IT+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	06d2      	lsls	r2, r2, #27
 8001122:	d505      	bpl.n	8001130 <UART_Receive_IT+0x88>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001124:	9101      	str	r1, [sp, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001130:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001132:	f7ff ffb8 	bl	80010a6 <HAL_UARTEx_RxEventCallback>
 8001136:	2000      	movs	r0, #0
 8001138:	e010      	b.n	800115c <UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800113a:	b939      	cbnz	r1, 800114c <UART_Receive_IT+0xa4>
 800113c:	6901      	ldr	r1, [r0, #16]
 800113e:	b929      	cbnz	r1, 800114c <UART_Receive_IT+0xa4>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001140:	6852      	ldr	r2, [r2, #4]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8001146:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001148:	3301      	adds	r3, #1
 800114a:	e7c0      	b.n	80010ce <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800114c:	6852      	ldr	r2, [r2, #4]
 800114e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001152:	e7f7      	b.n	8001144 <UART_Receive_IT+0x9c>
        HAL_UART_RxCpltCallback(huart);
 8001154:	f000 fa60 	bl	8001618 <HAL_UART_RxCpltCallback>
 8001158:	e7ed      	b.n	8001136 <UART_Receive_IT+0x8e>
    return HAL_BUSY;
 800115a:	2002      	movs	r0, #2
}
 800115c:	b002      	add	sp, #8
 800115e:	bd10      	pop	{r4, pc}

08001160 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001160:	6803      	ldr	r3, [r0, #0]
{
 8001162:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001164:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001166:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001168:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800116a:	f012 0f0f 	tst.w	r2, #15
{
 800116e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001170:	d108      	bne.n	8001184 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001172:	0695      	lsls	r5, r2, #26
 8001174:	d568      	bpl.n	8001248 <HAL_UART_IRQHandler+0xe8>
 8001176:	068d      	lsls	r5, r1, #26
 8001178:	d566      	bpl.n	8001248 <HAL_UART_IRQHandler+0xe8>
}
 800117a:	b003      	add	sp, #12
 800117c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8001180:	f7ff bf92 	b.w	80010a8 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001184:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001188:	f401 7590 	and.w	r5, r1, #288	; 0x120
 800118c:	4305      	orrs	r5, r0
 800118e:	d05b      	beq.n	8001248 <HAL_UART_IRQHandler+0xe8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001190:	07d5      	lsls	r5, r2, #31
 8001192:	d505      	bpl.n	80011a0 <HAL_UART_IRQHandler+0x40>
 8001194:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001196:	bf42      	ittt	mi
 8001198:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800119a:	f043 0301 	orrmi.w	r3, r3, #1
 800119e:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011a0:	0755      	lsls	r5, r2, #29
 80011a2:	d504      	bpl.n	80011ae <HAL_UART_IRQHandler+0x4e>
 80011a4:	b118      	cbz	r0, 80011ae <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011ae:	0793      	lsls	r3, r2, #30
 80011b0:	d504      	bpl.n	80011bc <HAL_UART_IRQHandler+0x5c>
 80011b2:	b118      	cbz	r0, 80011bc <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80011bc:	0715      	lsls	r5, r2, #28
 80011be:	d507      	bpl.n	80011d0 <HAL_UART_IRQHandler+0x70>
 80011c0:	f001 0320 	and.w	r3, r1, #32
 80011c4:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011c6:	bf1e      	ittt	ne
 80011c8:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 80011ca:	f043 0308 	orrne.w	r3, r3, #8
 80011ce:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d032      	beq.n	800123c <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011d6:	0690      	lsls	r0, r2, #26
 80011d8:	d504      	bpl.n	80011e4 <HAL_UART_IRQHandler+0x84>
 80011da:	068a      	lsls	r2, r1, #26
 80011dc:	d502      	bpl.n	80011e4 <HAL_UART_IRQHandler+0x84>
        UART_Receive_IT(huart);
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff ff62 	bl	80010a8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011e8:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80011ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011ee:	f005 0508 	and.w	r5, r5, #8
 80011f2:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80011f4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011f6:	d023      	beq.n	8001240 <HAL_UART_IRQHandler+0xe0>
        UART_EndRxTransfer(huart);
 80011f8:	f7ff fe74 	bl	8000ee4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	6953      	ldr	r3, [r2, #20]
 8001200:	065b      	lsls	r3, r3, #25
 8001202:	d518      	bpl.n	8001236 <HAL_UART_IRQHandler+0xd6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001204:	f102 0314 	add.w	r3, r2, #20
 8001208:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800120c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001210:	f102 0014 	add.w	r0, r2, #20
 8001214:	e840 3100 	strex	r1, r3, [r0]
 8001218:	2900      	cmp	r1, #0
 800121a:	d1f3      	bne.n	8001204 <HAL_UART_IRQHandler+0xa4>
          if (huart->hdmarx != NULL)
 800121c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800121e:	b150      	cbz	r0, 8001236 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001220:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_UART_IRQHandler+0x28c>)
 8001222:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001224:	f7ff fad6 	bl	80007d4 <HAL_DMA_Abort_IT>
 8001228:	b140      	cbz	r0, 800123c <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800122a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800122c:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800122e:	b003      	add	sp, #12
 8001230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001234:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001236:	4620      	mov	r0, r4
 8001238:	f000 f9f6 	bl	8001628 <HAL_UART_ErrorCallback>
}
 800123c:	b003      	add	sp, #12
 800123e:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8001240:	f000 f9f2 	bl	8001628 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001244:	6425      	str	r5, [r4, #64]	; 0x40
 8001246:	e7f9      	b.n	800123c <HAL_UART_IRQHandler+0xdc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001248:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800124a:	2801      	cmp	r0, #1
 800124c:	f040 8091 	bne.w	8001372 <HAL_UART_IRQHandler+0x212>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001250:	06d5      	lsls	r5, r2, #27
 8001252:	f140 808e 	bpl.w	8001372 <HAL_UART_IRQHandler+0x212>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001256:	06c8      	lsls	r0, r1, #27
 8001258:	f140 808b 	bpl.w	8001372 <HAL_UART_IRQHandler+0x212>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800125c:	2200      	movs	r2, #0
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	9201      	str	r2, [sp, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	0655      	lsls	r5, r2, #25
 800126e:	d54c      	bpl.n	800130a <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001270:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001272:	680a      	ldr	r2, [r1, #0]
 8001274:	6852      	ldr	r2, [r2, #4]
 8001276:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8001278:	2a00      	cmp	r2, #0
 800127a:	d0df      	beq.n	800123c <HAL_UART_IRQHandler+0xdc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800127c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800127e:	4290      	cmp	r0, r2
 8001280:	d9dc      	bls.n	800123c <HAL_UART_IRQHandler+0xdc>
        huart->RxXferCount = nb_remaining_rx_data;
 8001282:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001284:	69ca      	ldr	r2, [r1, #28]
 8001286:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800128a:	d036      	beq.n	80012fa <HAL_UART_IRQHandler+0x19a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800128c:	f103 020c 	add.w	r2, r3, #12
 8001290:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001298:	f103 000c 	add.w	r0, r3, #12
 800129c:	e840 2100 	strex	r1, r2, [r0]
 80012a0:	2900      	cmp	r1, #0
 80012a2:	d1f3      	bne.n	800128c <HAL_UART_IRQHandler+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012a4:	f103 0214 	add.w	r2, r3, #20
 80012a8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012ac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012b0:	f103 0014 	add.w	r0, r3, #20
 80012b4:	e840 2100 	strex	r1, r2, [r0]
 80012b8:	2900      	cmp	r1, #0
 80012ba:	d1f3      	bne.n	80012a4 <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012bc:	f103 0214 	add.w	r2, r3, #20
 80012c0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012c8:	f103 0014 	add.w	r0, r3, #20
 80012cc:	e840 2100 	strex	r1, r2, [r0]
 80012d0:	2900      	cmp	r1, #0
 80012d2:	d1f3      	bne.n	80012bc <HAL_UART_IRQHandler+0x15c>
          huart->RxState = HAL_UART_STATE_READY;
 80012d4:	2220      	movs	r2, #32
 80012d6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012da:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012dc:	f103 020c 	add.w	r2, r3, #12
 80012e0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80012e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012e8:	f103 000c 	add.w	r0, r3, #12
 80012ec:	e840 2100 	strex	r1, r2, [r0]
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d1f3      	bne.n	80012dc <HAL_UART_IRQHandler+0x17c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80012f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012f6:	f7ff fa29 	bl	800074c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80012fa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80012fc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80012fe:	1ac9      	subs	r1, r1, r3
 8001300:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff fecf 	bl	80010a6 <HAL_UARTEx_RxEventCallback>
 8001308:	e798      	b.n	800123c <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800130a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800130c:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800130e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8001310:	b289      	uxth	r1, r1
 8001312:	2900      	cmp	r1, #0
 8001314:	d092      	beq.n	800123c <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001316:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8001318:	1a89      	subs	r1, r1, r2
 800131a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800131c:	2900      	cmp	r1, #0
 800131e:	d08d      	beq.n	800123c <HAL_UART_IRQHandler+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001320:	f103 020c 	add.w	r2, r3, #12
 8001324:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001328:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800132c:	f103 050c 	add.w	r5, r3, #12
 8001330:	e845 2000 	strex	r0, r2, [r5]
 8001334:	2800      	cmp	r0, #0
 8001336:	d1f3      	bne.n	8001320 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001338:	f103 0214 	add.w	r2, r3, #20
 800133c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001340:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001344:	f103 0514 	add.w	r5, r3, #20
 8001348:	e845 2000 	strex	r0, r2, [r5]
 800134c:	2800      	cmp	r0, #0
 800134e:	d1f3      	bne.n	8001338 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8001350:	2220      	movs	r2, #32
 8001352:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001356:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001358:	f103 020c 	add.w	r2, r3, #12
 800135c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001360:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001364:	f103 050c 	add.w	r5, r3, #12
 8001368:	e845 2000 	strex	r0, r2, [r5]
 800136c:	2800      	cmp	r0, #0
 800136e:	d1f3      	bne.n	8001358 <HAL_UART_IRQHandler+0x1f8>
 8001370:	e7c7      	b.n	8001302 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001372:	0610      	lsls	r0, r2, #24
 8001374:	d528      	bpl.n	80013c8 <HAL_UART_IRQHandler+0x268>
 8001376:	060d      	lsls	r5, r1, #24
 8001378:	d526      	bpl.n	80013c8 <HAL_UART_IRQHandler+0x268>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800137a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800137e:	2a21      	cmp	r2, #33	; 0x21
 8001380:	f47f af5c 	bne.w	800123c <HAL_UART_IRQHandler+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001384:	68a1      	ldr	r1, [r4, #8]
 8001386:	6a22      	ldr	r2, [r4, #32]
 8001388:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800138c:	d117      	bne.n	80013be <HAL_UART_IRQHandler+0x25e>
 800138e:	6921      	ldr	r1, [r4, #16]
 8001390:	b9a9      	cbnz	r1, 80013be <HAL_UART_IRQHandler+0x25e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001392:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001396:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800139a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800139c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800139e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80013a0:	3a01      	subs	r2, #1
 80013a2:	b292      	uxth	r2, r2
 80013a4:	84e2      	strh	r2, [r4, #38]	; 0x26
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	f47f af48 	bne.w	800123c <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	e73e      	b.n	800123c <HAL_UART_IRQHandler+0xdc>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80013be:	1c51      	adds	r1, r2, #1
 80013c0:	6221      	str	r1, [r4, #32]
 80013c2:	7812      	ldrb	r2, [r2, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	e7ea      	b.n	800139e <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80013c8:	0650      	lsls	r0, r2, #25
 80013ca:	f57f af37 	bpl.w	800123c <HAL_UART_IRQHandler+0xdc>
 80013ce:	064a      	lsls	r2, r1, #25
 80013d0:	f57f af34 	bpl.w	800123c <HAL_UART_IRQHandler+0xdc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013da:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80013dc:	2320      	movs	r3, #32
 80013de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80013e2:	4620      	mov	r0, r4
 80013e4:	f000 f910 	bl	8001608 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80013e8:	e728      	b.n	800123c <HAL_UART_IRQHandler+0xdc>
 80013ea:	bf00      	nop
 80013ec:	08001097 	.word	0x08001097

080013f0 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 80013f0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 80013f2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80013f4:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f6:	2200      	movs	r2, #0
 80013f8:	6402      	str	r2, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80013fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80013fe:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 8001400:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  huart->pRxBuffPtr = pData;
 8001404:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800140c:	60d9      	str	r1, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800140e:	6959      	ldr	r1, [r3, #20]
 8001410:	f041 0101 	orr.w	r1, r1, #1
 8001414:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001416:	68d9      	ldr	r1, [r3, #12]
 8001418:	f041 0120 	orr.w	r1, r1, #32
 800141c:	60d9      	str	r1, [r3, #12]
}
 800141e:	4610      	mov	r0, r2
 8001420:	4770      	bx	lr

08001422 <HAL_UART_Receive_IT>:
{
 8001422:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001424:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8001428:	2e20      	cmp	r6, #32
 800142a:	d110      	bne.n	800144e <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 800142c:	b161      	cbz	r1, 8001448 <HAL_UART_Receive_IT+0x26>
 800142e:	b15a      	cbz	r2, 8001448 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8001430:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8001434:	2c01      	cmp	r4, #1
 8001436:	d00a      	beq.n	800144e <HAL_UART_Receive_IT+0x2c>
 8001438:	2401      	movs	r4, #1
 800143a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800143e:	2400      	movs	r4, #0
 8001440:	6304      	str	r4, [r0, #48]	; 0x30
}
 8001442:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8001444:	f7ff bfd4 	b.w	80013f0 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8001448:	2001      	movs	r0, #1
}
 800144a:	bc70      	pop	{r4, r5, r6}
 800144c:	4770      	bx	lr
    return HAL_BUSY;
 800144e:	2002      	movs	r0, #2
 8001450:	e7fb      	b.n	800144a <HAL_UART_Receive_IT+0x28>
	...

08001454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800148c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800145a:	e003      	b.n	8001464 <LoopCopyDataInit>

0800145c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800145e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001462:	3104      	adds	r1, #4

08001464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800146a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800146c:	d3f6      	bcc.n	800145c <CopyDataInit>
  ldr  r2, =_sbss
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001470:	e002      	b.n	8001478 <LoopFillZerobss>

08001472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001474:	f842 3b04 	str.w	r3, [r2], #4

08001478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800147a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800147c:	d3f9      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800147e:	f7ff f885 	bl	800058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001482:	f000 f929 	bl	80016d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001486:	f000 f813 	bl	80014b0 <main>
  bx  lr    
 800148a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800148c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001490:	0800176c 	.word	0x0800176c
  ldr  r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001498:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 800149c:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 80014a0:	200000ac 	.word	0x200000ac

080014a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a4:	e7fe      	b.n	80014a4 <ADC_IRQHandler>

080014a6 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80014a6:	b508      	push	{r3, lr}
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 80014a8:	2002      	movs	r0, #2
 80014aa:	f7ff f861 	bl	8000570 <BSP_LED_On>
  while(1)
 80014ae:	e7fe      	b.n	80014ae <Error_Handler+0x8>

080014b0 <main>:
{
 80014b0:	b500      	push	{lr}
 80014b2:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 80014b4:	f7ff f8b4 	bl	8000620 <HAL_Init>
  BSP_LED_Init(LED3);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff f801 	bl	80004c0 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7fe fffe 	bl	80004c0 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7fe fffb 	bl	80004c0 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f7fe fff8 	bl	80004c0 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <main+0x138>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	9101      	str	r1, [sp, #4]
 80014d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <main+0x13c>)
 80014ea:	9102      	str	r1, [sp, #8]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fc:	2001      	movs	r0, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fe:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	e9cd 0308 	strd	r0, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	2402      	movs	r4, #2
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001512:	2508      	movs	r5, #8
 8001514:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001518:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800151e:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001520:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001522:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001524:	f7ff fa48 	bl	80009b8 <HAL_RCC_OscConfig>
 8001528:	b108      	cbz	r0, 800152e <main+0x7e>
    Error_Handler();
 800152a:	f7ff ffbc 	bl	80014a6 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800152e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001530:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001534:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153c:	e9cd 1306 	strd	r1, r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001540:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001542:	2105      	movs	r1, #5
 8001544:	a803      	add	r0, sp, #12
 8001546:	f7ff fc11 	bl	8000d6c <HAL_RCC_ClockConfig>
 800154a:	2800      	cmp	r0, #0
 800154c:	d1ed      	bne.n	800152a <main+0x7a>
  if (HAL_GetREVID() == 0x1001)
 800154e:	f7ff f88f 	bl	8000670 <HAL_GetREVID>
 8001552:	f241 0301 	movw	r3, #4097	; 0x1001
 8001556:	4298      	cmp	r0, r3
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	bf08      	it	eq
 800155a:	4a25      	ldreq	r2, [pc, #148]	; (80015f0 <main+0x140>)
  UartHandle.Instance          = USARTx;
 800155c:	4c25      	ldr	r4, [pc, #148]	; (80015f4 <main+0x144>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155e:	bf02      	ittt	eq
 8001560:	6813      	ldreq	r3, [r2, #0]
 8001562:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8001566:	6013      	streq	r3, [r2, #0]
  UartHandle.Init.BaudRate     = 9600;
 8001568:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <main+0x148>)
 800156a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800156e:	e9c4 2300 	strd	r2, r3, [r4]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001572:	250c      	movs	r5, #12
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8001574:	2300      	movs	r3, #0
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001576:	4620      	mov	r0, r4
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8001578:	e9c4 3302 	strd	r3, r3, [r4, #8]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 800157c:	6123      	str	r3, [r4, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 800157e:	61a3      	str	r3, [r4, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001580:	6165      	str	r5, [r4, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001582:	61e3      	str	r3, [r4, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001584:	f7ff fd3a 	bl	8000ffc <HAL_UART_Init>
 8001588:	2800      	cmp	r0, #0
 800158a:	d1ce      	bne.n	800152a <main+0x7a>
  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 800158c:	491b      	ldr	r1, [pc, #108]	; (80015fc <main+0x14c>)
 800158e:	462a      	mov	r2, r5
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff ff46 	bl	8001422 <HAL_UART_Receive_IT>
 8001596:	2800      	cmp	r0, #0
 8001598:	d1c7      	bne.n	800152a <main+0x7a>
  while (UartReady != SET)
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <main+0x150>)
 800159c:	461c      	mov	r4, r3
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d1fc      	bne.n	800159e <main+0xee>
  UartReady = RESET;
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
  if(HAL_UART_Transmit_IT(&UartHandle, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 80015a8:	4916      	ldr	r1, [pc, #88]	; (8001604 <main+0x154>)
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <main+0x144>)
 80015ac:	220c      	movs	r2, #12
 80015ae:	f7ff fd53 	bl	8001058 <HAL_UART_Transmit_IT>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d1b9      	bne.n	800152a <main+0x7a>
  while (UartReady != SET)
 80015b6:	7823      	ldrb	r3, [r4, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d1fc      	bne.n	80015b6 <main+0x106>
  UartReady = RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <main+0x154>)
 80015c0:	490e      	ldr	r1, [pc, #56]	; (80015fc <main+0x14c>)
 80015c2:	7023      	strb	r3, [r4, #0]
  while (BufferLength--)
 80015c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
  UartReady = RESET;
 80015c8:	230c      	movs	r3, #12
  while (BufferLength--)
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4283      	cmp	r3, r0
 80015d0:	d100      	bne.n	80015d4 <main+0x124>
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <main+0x122>
    if ((*pBuffer1) != *pBuffer2)
 80015d4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80015d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80015dc:	42a5      	cmp	r5, r4
 80015de:	d0f4      	beq.n	80015ca <main+0x11a>
  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,RXBUFFERSIZE))
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f6      	beq.n	80015d2 <main+0x122>
 80015e4:	e7a1      	b.n	800152a <main+0x7a>
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40007000 	.word	0x40007000
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	2000005c 	.word	0x2000005c
 80015f8:	40004400 	.word	0x40004400
 80015fc:	200000a0 	.word	0x200000a0
 8001600:	20000054 	.word	0x20000054
 8001604:	20000028 	.word	0x20000028

08001608 <HAL_UART_TxCpltCallback>:
  UartReady = SET;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_UART_TxCpltCallback+0xc>)
 800160a:	2201      	movs	r2, #1
  BSP_LED_On(LED6);
 800160c:	2003      	movs	r0, #3
  UartReady = SET;
 800160e:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED6);
 8001610:	f7fe bfae 	b.w	8000570 <BSP_LED_On>
 8001614:	20000054 	.word	0x20000054

08001618 <HAL_UART_RxCpltCallback>:
  UartReady = SET;
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <HAL_UART_RxCpltCallback+0xc>)
 800161a:	2201      	movs	r2, #1
  BSP_LED_On(LED4);
 800161c:	2000      	movs	r0, #0
  UartReady = SET;
 800161e:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED4);
 8001620:	f7fe bfa6 	b.w	8000570 <BSP_LED_On>
 8001624:	20000054 	.word	0x20000054

08001628 <HAL_UART_ErrorCallback>:
  BSP_LED_On(LED3); 
 8001628:	2001      	movs	r0, #1
 800162a:	f7fe bfa1 	b.w	8000570 <BSP_LED_On>
	...

08001630 <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{  
 8001630:	b530      	push	{r4, r5, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <HAL_UART_MspInit+0x80>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001636:	481f      	ldr	r0, [pc, #124]	; (80016b4 <HAL_UART_MspInit+0x84>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8001638:	2400      	movs	r4, #0
 800163a:	9400      	str	r4, [sp, #0]
 800163c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
 8001644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001646:	f002 0201 	and.w	r2, r2, #1
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800164e:	9401      	str	r4, [sp, #4]
 8001650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
 8001658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165a:	f002 0201 	and.w	r2, r2, #1
 800165e:	9201      	str	r2, [sp, #4]
 8001660:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE(); 
 8001662:	9402      	str	r4, [sp, #8]
 8001664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001666:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001674:	2204      	movs	r2, #4
  USARTx_CLK_ENABLE(); 
 8001676:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001678:	2507      	movs	r5, #7
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800167c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800167e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001682:	e9cd 4305 	strd	r4, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001686:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001688:	f7ff f8b6 	bl	80007f8 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800168c:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800168e:	a903      	add	r1, sp, #12
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <HAL_UART_MspInit+0x84>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001692:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001694:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001696:	f7ff f8af 	bl	80007f8 <HAL_GPIO_Init>
    
  /*##-3- Configure the NVIC for UART ########################################*/
  /* NVIC for USART1 */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	4621      	mov	r1, r4
 800169e:	2026      	movs	r0, #38	; 0x26
 80016a0:	f7fe fffe 	bl	80006a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80016a4:	2026      	movs	r0, #38	; 0x26
 80016a6:	f7ff f82d 	bl	8000704 <HAL_NVIC_EnableIRQ>
}
 80016aa:	b009      	add	sp, #36	; 0x24
 80016ac:	bd30      	pop	{r4, r5, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000

080016b8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80016b8:	4770      	bx	lr

080016ba <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler>

080016bc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler>

080016be <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler>

080016c0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler>

080016c2 <SVC_Handler>:
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80016c8:	f7fe bfc0 	b.w	800064c <HAL_IncTick>

080016cc <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream 
  *         used for USART data transmission     
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(& UartHandle);
 80016cc:	4801      	ldr	r0, [pc, #4]	; (80016d4 <USART2_IRQHandler+0x8>)
 80016ce:	f7ff bd47 	b.w	8001160 <HAL_UART_IRQHandler>
 80016d2:	bf00      	nop
 80016d4:	2000005c 	.word	0x2000005c

080016d8 <__libc_init_array>:
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	4d0d      	ldr	r5, [pc, #52]	; (8001710 <__libc_init_array+0x38>)
 80016dc:	4c0d      	ldr	r4, [pc, #52]	; (8001714 <__libc_init_array+0x3c>)
 80016de:	1b64      	subs	r4, r4, r5
 80016e0:	10a4      	asrs	r4, r4, #2
 80016e2:	2600      	movs	r6, #0
 80016e4:	42a6      	cmp	r6, r4
 80016e6:	d109      	bne.n	80016fc <__libc_init_array+0x24>
 80016e8:	4d0b      	ldr	r5, [pc, #44]	; (8001718 <__libc_init_array+0x40>)
 80016ea:	4c0c      	ldr	r4, [pc, #48]	; (800171c <__libc_init_array+0x44>)
 80016ec:	f000 f818 	bl	8001720 <_init>
 80016f0:	1b64      	subs	r4, r4, r5
 80016f2:	10a4      	asrs	r4, r4, #2
 80016f4:	2600      	movs	r6, #0
 80016f6:	42a6      	cmp	r6, r4
 80016f8:	d105      	bne.n	8001706 <__libc_init_array+0x2e>
 80016fa:	bd70      	pop	{r4, r5, r6, pc}
 80016fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001700:	4798      	blx	r3
 8001702:	3601      	adds	r6, #1
 8001704:	e7ee      	b.n	80016e4 <__libc_init_array+0xc>
 8001706:	f855 3b04 	ldr.w	r3, [r5], #4
 800170a:	4798      	blx	r3
 800170c:	3601      	adds	r6, #1
 800170e:	e7f2      	b.n	80016f6 <__libc_init_array+0x1e>
 8001710:	08001764 	.word	0x08001764
 8001714:	08001764 	.word	0x08001764
 8001718:	08001764 	.word	0x08001764
 800171c:	08001768 	.word	0x08001768

08001720 <_init>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr

0800172c <_fini>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr
