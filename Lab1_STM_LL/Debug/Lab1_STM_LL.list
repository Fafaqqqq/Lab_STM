
Lab1_STM_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007754  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e8  080078e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080078e8  080078e8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078e8  080078e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080078f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000810  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008a0  200008a0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb64  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000414f  00000000  00000000  0003bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001220  00000000  00000000  00041128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025805  00000000  00000000  00042348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019956  00000000  00000000  00067b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6723  00000000  00000000  000814a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00157bc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005348  00000000  00000000  00157c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078c4 	.word	0x080078c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080078c4 	.word	0x080078c4

080001c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <LL_RCC_HSE_Enable+0x1c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <LL_RCC_HSE_Enable+0x1c>)
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40023800 	.word	0x40023800

080001e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <LL_RCC_HSE_IsReady+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80001f8:	bf0c      	ite	eq
 80001fa:	2301      	moveq	r3, #1
 80001fc:	2300      	movne	r3, #0
 80001fe:	b2db      	uxtb	r3, r3
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800

08000210 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <LL_RCC_SetSysClkSource+0x24>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	f023 0203 	bic.w	r2, r3, #3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_RCC_SetSysClkSource+0x24>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4313      	orrs	r3, r2
 8000226:	608b      	str	r3, [r1, #8]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800

08000238 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <LL_RCC_GetSysClkSource+0x18>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f003 030c 	and.w	r3, r3, #12
}
 8000244:	4618      	mov	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800

08000254 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <LL_RCC_SetAHBPrescaler+0x24>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000264:	4904      	ldr	r1, [pc, #16]	; (8000278 <LL_RCC_SetAHBPrescaler+0x24>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4313      	orrs	r3, r2
 800026a:	608b      	str	r3, [r1, #8]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40023800 	.word	0x40023800

0800027c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800028c:	4904      	ldr	r1, [pc, #16]	; (80002a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	608b      	str	r3, [r1, #8]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40023800 	.word	0x40023800

080002a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	608b      	str	r3, [r1, #8]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40023800 	.word	0x40023800

080002cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <LL_RCC_PLL_Enable+0x1c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <LL_RCC_PLL_Enable+0x1c>)
 80002d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40023800 	.word	0x40023800

080002ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <LL_RCC_PLL_IsReady+0x24>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002fc:	bf0c      	ite	eq
 80002fe:	2301      	moveq	r3, #1
 8000300:	2300      	movne	r3, #0
 8000302:	b2db      	uxtb	r3, r3
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800

08000314 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000322:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000328:	4013      	ands	r3, r2
 800032a:	68f9      	ldr	r1, [r7, #12]
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	4311      	orrs	r1, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	0192      	lsls	r2, r2, #6
 8000334:	430a      	orrs	r2, r1
 8000336:	4908      	ldr	r1, [pc, #32]	; (8000358 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000338:	4313      	orrs	r3, r2
 800033a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000344:	4904      	ldr	r1, [pc, #16]	; (8000358 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	4313      	orrs	r3, r2
 800034a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40023800 	.word	0x40023800
 800035c:	ffbf8000 	.word	0xffbf8000

08000360 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000370:	685a      	ldr	r2, [r3, #4]
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000374:	4013      	ands	r3, r2
 8000376:	68f9      	ldr	r1, [r7, #12]
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	4311      	orrs	r1, r2
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	0192      	lsls	r2, r2, #6
 8000380:	4311      	orrs	r1, r2
 8000382:	683a      	ldr	r2, [r7, #0]
 8000384:	430a      	orrs	r2, r1
 8000386:	4904      	ldr	r1, [pc, #16]	; (8000398 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000388:	4313      	orrs	r3, r2
 800038a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	40023800 	.word	0x40023800
 800039c:	f0bf8000 	.word	0xf0bf8000

080003a0 <LL_RCC_PLLI2S_Enable>:
  * @brief  Enable PLLI2S
  * @rmtoll CR           PLLI2SON     LL_RCC_PLLI2S_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLI2S_Enable(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <LL_RCC_PLLI2S_Enable+0x1c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <LL_RCC_PLLI2S_Enable+0x1c>)
 80003aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ae:	6013      	str	r3, [r2, #0]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800

080003c0 <LL_RCC_PLLI2S_IsReady>:
  * @brief  Check if PLLI2S Ready
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <LL_RCC_PLLI2S_IsReady+0x24>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80003d0:	bf0c      	ite	eq
 80003d2:	2301      	moveq	r3, #1
 80003d4:	2300      	movne	r3, #0
 80003d6:	b2db      	uxtb	r3, r3
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800

080003e8 <LL_RCC_PLLI2S_ConfigDomain_I2S>:
  *         @arg @ref LL_RCC_PLLI2SR_DIV_6
  *         @arg @ref LL_RCC_PLLI2SR_DIV_7
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLI2S_ConfigDomain_I2S(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	60b9      	str	r1, [r7, #8]
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&RCC->PLLCFGR) + (Source & 0x80U)));
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <LL_RCC_PLLI2S_ConfigDomain_I2S+0x64>)
 80003fe:	4413      	add	r3, r2
 8000400:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*pReg, RCC_PLLCFGR_PLLSRC, (Source & (~0x80U)));
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000410:	431a      	orrs	r2, r3
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	601a      	str	r2, [r3, #0]
#if defined(RCC_PLLI2SCFGR_PLLI2SM)
  MODIFY_REG(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SM, PLLM);
#else
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLM, PLLM);
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800041e:	490c      	ldr	r1, [pc, #48]	; (8000450 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	4313      	orrs	r3, r2
 8000424:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLI2SCFGR_PLLI2SM */
  MODIFY_REG(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SN | RCC_PLLI2SCFGR_PLLI2SR, PLLN << RCC_PLLI2SCFGR_PLLI2SN_Pos | PLLR);
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000428:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x6c>)
 800042e:	4013      	ands	r3, r2
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	0191      	lsls	r1, r2, #6
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	430a      	orrs	r2, r1
 8000438:	4905      	ldr	r1, [pc, #20]	; (8000450 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 800043a:	4313      	orrs	r3, r2
 800043c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8000440:	bf00      	nop
 8000442:	371c      	adds	r7, #28
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40023804 	.word	0x40023804
 8000450:	40023800 	.word	0x40023800
 8000454:	8fff803f 	.word	0x8fff803f

08000458 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000464:	4907      	ldr	r1, [pc, #28]	; (8000484 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4313      	orrs	r3, r2
 800046a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800046e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4013      	ands	r3, r2
 8000474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000476:	68fb      	ldr	r3, [r7, #12]
}
 8000478:	bf00      	nop
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800

08000488 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <LL_SYSCFG_SetEXTISource+0x58>)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	3302      	adds	r3, #2
 800049a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	43db      	mvns	r3, r3
 80004a4:	ea02 0103 	and.w	r1, r2, r3
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	0c1b      	lsrs	r3, r3, #16
 80004ac:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	fa93 f3a3 	rbit	r3, r3
 80004b4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	fab3 f383 	clz	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	fa03 f202 	lsl.w	r2, r3, r2
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <LL_SYSCFG_SetEXTISource+0x58>)
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	430a      	orrs	r2, r1
 80004ce:	3302      	adds	r3, #2
 80004d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	40013800 	.word	0x40013800

080004e4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <LL_FLASH_SetLatency+0x24>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f023 0207 	bic.w	r2, r3, #7
 80004f4:	4904      	ldr	r1, [pc, #16]	; (8000508 <LL_FLASH_SetLatency+0x24>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	600b      	str	r3, [r1, #0]
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40023c00 	.word	0x40023c00

0800050c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <LL_FLASH_GetLatency+0x18>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f003 0307 	and.w	r3, r3, #7
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40023c00 	.word	0x40023c00

08000528 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000538:	4904      	ldr	r1, [pc, #16]	; (800054c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4313      	orrs	r3, r2
 800053e:	600b      	str	r3, [r1, #0]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40007000 	.word	0x40007000

08000550 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000550:	b480      	push	{r7}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fa93 f3a3 	rbit	r3, r3
 800056a:	613b      	str	r3, [r7, #16]
  return result;
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	fab3 f383 	clz	r3, r3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	fa93 f3a3 	rbit	r3, r3
 800058a:	61bb      	str	r3, [r7, #24]
  return result;
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	fab3 f383 	clz	r3, r3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	431a      	orrs	r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	601a      	str	r2, [r3, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3724      	adds	r7, #36	; 0x24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b089      	sub	sp, #36	; 0x24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	fa93 f3a3 	rbit	r3, r3
 80005c8:	613b      	str	r3, [r7, #16]
  return result;
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	fab3 f383 	clz	r3, r3
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	2103      	movs	r1, #3
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	43db      	mvns	r3, r3
 80005dc:	401a      	ands	r2, r3
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	fa93 f3a3 	rbit	r3, r3
 80005e8:	61bb      	str	r3, [r7, #24]
  return result;
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	fab3 f383 	clz	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	431a      	orrs	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	60da      	str	r2, [r3, #12]
}
 8000600:	bf00      	nop
 8000602:	3724      	adds	r7, #36	; 0x24
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	619a      	str	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	041a      	lsls	r2, r3, #16
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	619a      	str	r2, [r3, #24]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000646:	b480      	push	{r7}
 8000648:	b085      	sub	sp, #20
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	4013      	ands	r3, r2
 800065c:	041a      	lsls	r2, r3, #16
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	43d9      	mvns	r1, r3
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	400b      	ands	r3, r1
 8000666:	431a      	orrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	619a      	str	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fc0a 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f84a 	bl	8000718 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000684:	f000 f89c 	bl	80007c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 f944 	bl	8000914 <MX_GPIO_Init>
  MX_I2C1_Init();
 800068c:	f000 f8ae 	bl	80007ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000690:	f000 f8da 	bl	8000848 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000694:	f000 f908 	bl	80008a8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000698:	f006 fd02 	bl	80070a0 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LL_GPIO_ResetOutputPin(GPIOD, LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin);
 800069c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006a0:	481c      	ldr	r0, [pc, #112]	; (8000714 <main+0x9c>)
 80006a2:	f7ff ffc1 	bl	8000628 <LL_GPIO_ResetOutputPin>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006a6:	f006 fd21 	bl	80070ec <MX_USB_HOST_Process>

    LL_GPIO_TogglePin(GPIOD, LD3_Pin); // Включил диод LD3
 80006aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ae:	4819      	ldr	r0, [pc, #100]	; (8000714 <main+0x9c>)
 80006b0:	f7ff ffc9 	bl	8000646 <LL_GPIO_TogglePin>
    HAL_Delay(200);
 80006b4:	20c8      	movs	r0, #200	; 0xc8
 80006b6:	f000 fc5f 	bl	8000f78 <HAL_Delay>
    LL_GPIO_TogglePin(GPIOD, LD3_Pin); // Выключил диод LD3
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	4815      	ldr	r0, [pc, #84]	; (8000714 <main+0x9c>)
 80006c0:	f7ff ffc1 	bl	8000646 <LL_GPIO_TogglePin>

    LL_GPIO_TogglePin(GPIOD, LD4_Pin); // Включил диод LD4
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	4812      	ldr	r0, [pc, #72]	; (8000714 <main+0x9c>)
 80006ca:	f7ff ffbc 	bl	8000646 <LL_GPIO_TogglePin>
    HAL_Delay(200);
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f000 fc52 	bl	8000f78 <HAL_Delay>
    LL_GPIO_TogglePin(GPIOD, LD4_Pin); // Выключил диод LD4
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	480e      	ldr	r0, [pc, #56]	; (8000714 <main+0x9c>)
 80006da:	f7ff ffb4 	bl	8000646 <LL_GPIO_TogglePin>

    LL_GPIO_TogglePin(GPIOD, LD5_Pin); // Включил диод LD5
 80006de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e2:	480c      	ldr	r0, [pc, #48]	; (8000714 <main+0x9c>)
 80006e4:	f7ff ffaf 	bl	8000646 <LL_GPIO_TogglePin>
    HAL_Delay(200);
 80006e8:	20c8      	movs	r0, #200	; 0xc8
 80006ea:	f000 fc45 	bl	8000f78 <HAL_Delay>
    LL_GPIO_TogglePin(GPIOD, LD5_Pin); // Выключил диод LD5
 80006ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x9c>)
 80006f4:	f7ff ffa7 	bl	8000646 <LL_GPIO_TogglePin>

    LL_GPIO_TogglePin(GPIOD, LD6_Pin); // Включил диод LD6
 80006f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <main+0x9c>)
 80006fe:	f7ff ffa2 	bl	8000646 <LL_GPIO_TogglePin>
    HAL_Delay(200);
 8000702:	20c8      	movs	r0, #200	; 0xc8
 8000704:	f000 fc38 	bl	8000f78 <HAL_Delay>
    LL_GPIO_TogglePin(GPIOD, LD6_Pin); // Выключил диод LD6
 8000708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070c:	4801      	ldr	r0, [pc, #4]	; (8000714 <main+0x9c>)
 800070e:	f7ff ff9a 	bl	8000646 <LL_GPIO_TogglePin>
    MX_USB_HOST_Process();
 8000712:	e7c8      	b.n	80006a6 <main+0x2e>
 8000714:	40020c00 	.word	0x40020c00

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800071c:	2005      	movs	r0, #5
 800071e:	f7ff fee1 	bl	80004e4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000722:	bf00      	nop
 8000724:	f7ff fef2 	bl	800050c <LL_FLASH_GetLatency>
 8000728:	4603      	mov	r3, r0
 800072a:	2b05      	cmp	r3, #5
 800072c:	d1fa      	bne.n	8000724 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800072e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000732:	f7ff fef9 	bl	8000528 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000736:	f7ff fd47 	bl	80001c8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800073a:	bf00      	nop
 800073c:	f7ff fd54 	bl	80001e8 <LL_RCC_HSE_IsReady>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d1fa      	bne.n	800073c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8000746:	2300      	movs	r3, #0
 8000748:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800074c:	2108      	movs	r1, #8
 800074e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000752:	f7ff fddf 	bl	8000314 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLQ_DIV_7);
 8000756:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800075a:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800075e:	2108      	movs	r1, #8
 8000760:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000764:	f7ff fdfc 	bl	8000360 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000768:	f7ff fdb0 	bl	80002cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800076c:	bf00      	nop
 800076e:	f7ff fdbd 	bl	80002ec <LL_RCC_PLL_IsReady>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d1fa      	bne.n	800076e <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff fd6b 	bl	8000254 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800077e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000782:	f7ff fd7b 	bl	800027c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000786:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800078a:	f7ff fd8b 	bl	80002a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fd3e 	bl	8000210 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000794:	bf00      	nop
 8000796:	f7ff fd4f 	bl	8000238 <LL_RCC_GetSysClkSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b08      	cmp	r3, #8
 800079e:	d1fa      	bne.n	8000796 <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(168000000);
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <SystemClock_Config+0xa4>)
 80007a2:	f004 fd79 	bl	8005298 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 fb96 	bl	8000ed8 <HAL_InitTick>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007b2:	f000 f98b 	bl	8000acc <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	0a037a00 	.word	0x0a037a00

080007c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  LL_RCC_PLLI2S_ConfigDomain_I2S(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLI2SM_DIV_8, 192, LL_RCC_PLLI2SR_DIV_2);
 80007c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c8:	22c0      	movs	r2, #192	; 0xc0
 80007ca:	2108      	movs	r1, #8
 80007cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80007d0:	f7ff fe0a 	bl	80003e8 <LL_RCC_PLLI2S_ConfigDomain_I2S>
  LL_RCC_PLLI2S_Enable();
 80007d4:	f7ff fde4 	bl	80003a0 <LL_RCC_PLLI2S_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLLI2S_IsReady() != 1)
 80007d8:	bf00      	nop
 80007da:	f7ff fdf1 	bl	80003c0 <LL_RCC_PLLI2S_IsReady>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d1fa      	bne.n	80007da <PeriphCommonClock_Config+0x1a>
  {

  }
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	; (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_I2C1_Init+0x50>)
 800082a:	f002 fc01 	bl	8003030 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 f94a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000bc 	.word	0x200000bc
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_I2S3_Init+0x54>)
 800084e:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <MX_I2S3_Init+0x58>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_I2S3_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_I2S3_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_I2S3_Init+0x54>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_I2S3_Init+0x54>)
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <MX_I2S3_Init+0x5c>)
 8000872:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_I2S3_Init+0x54>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_I2S3_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_I2S3_Init+0x54>)
 8000888:	f002 fd16 	bl	80032b8 <HAL_I2S_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000892:	f000 f91b 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000168 	.word	0x20000168
 80008a0:	40003c00 	.word	0x40003c00
 80008a4:	00017700 	.word	0x00017700

080008a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI1_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_SPI1_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI1_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI1_Init+0x64>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI1_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_SPI1_Init+0x64>)
 80008fa:	f003 f9fb 	bl	8003cf4 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 f8e2 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000110 	.word	0x20000110
 8000910:	40013000 	.word	0x40013000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000934:	2010      	movs	r0, #16
 8000936:	f7ff fd8f 	bl	8000458 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800093a:	2004      	movs	r0, #4
 800093c:	f7ff fd8c 	bl	8000458 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000940:	2080      	movs	r0, #128	; 0x80
 8000942:	f7ff fd89 	bl	8000458 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fd86 	bl	8000458 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff fd83 	bl	8000458 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000952:	2008      	movs	r0, #8
 8000954:	f7ff fd80 	bl	8000458 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin);
 8000958:	2108      	movs	r1, #8
 800095a:	4857      	ldr	r0, [pc, #348]	; (8000ab8 <MX_GPIO_Init+0x1a4>)
 800095c:	f7ff fe64 	bl	8000628 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000960:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000964:	4855      	ldr	r0, [pc, #340]	; (8000abc <MX_GPIO_Init+0x1a8>)
 8000966:	f7ff fe5f 	bl	8000628 <LL_GPIO_ResetOutputPin>
                          |Audio_RST_Pin);

  /**/
  LL_GPIO_SetOutputPin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin);
 800096a:	2101      	movs	r1, #1
 800096c:	4854      	ldr	r0, [pc, #336]	; (8000ac0 <MX_GPIO_Init+0x1ac>)
 800096e:	f7ff fe4d 	bl	800060c <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000972:	2308      	movs	r3, #8
 8000974:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000976:	2301      	movs	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	484b      	ldr	r0, [pc, #300]	; (8000ab8 <MX_GPIO_Init+0x1a4>)
 800098c:	f003 fc5a 	bl	8004244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000990:	2301      	movs	r3, #1
 8000992:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000994:	2301      	movs	r3, #1
 8000996:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4845      	ldr	r0, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x1ac>)
 80009aa:	f003 fc4b 	bl	8004244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ae:	2308      	movs	r3, #8
 80009b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009b2:	2302      	movs	r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80009c2:	2305      	movs	r3, #5
 80009c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	483d      	ldr	r0, [pc, #244]	; (8000ac0 <MX_GPIO_Init+0x1ac>)
 80009cc:	f003 fc3a 	bl	8004244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009d0:	2304      	movs	r3, #4
 80009d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	4838      	ldr	r0, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0x1b0>)
 80009e2:	f003 fc2f 	bl	8004244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009ec:	2302      	movs	r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80009fc:	2305      	movs	r3, #5
 80009fe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x1b0>)
 8000a06:	f003 fc1d 	bl	8004244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a0a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a0e:	603b      	str	r3, [r7, #0]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a10:	2301      	movs	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4825      	ldr	r0, [pc, #148]	; (8000abc <MX_GPIO_Init+0x1a8>)
 8000a26:	f003 fc0d 	bl	8004244 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a2a:	2320      	movs	r3, #32
 8000a2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a36:	463b      	mov	r3, r7
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <MX_GPIO_Init+0x1a8>)
 8000a3c:	f003 fc02 	bl	8004244 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8000a40:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000a44:	2000      	movs	r0, #0
 8000a46:	f7ff fd1f 	bl	8000488 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8000a4a:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f7ff fd1a 	bl	8000488 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a60:	2301      	movs	r3, #1
 8000a62:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fa65 	bl	8003f38 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8000a76:	2301      	movs	r3, #1
 8000a78:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fa58 	bl	8003f38 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_GPIO_Init+0x1b4>)
 8000a8e:	f7ff fd8e 	bl	80005ae <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <MX_GPIO_Init+0x1a4>)
 8000a98:	f7ff fd89 	bl	80005ae <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <MX_GPIO_Init+0x1b4>)
 8000aa2:	f7ff fd55 	bl	8000550 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_GPIO_Init+0x1a4>)
 8000aac:	f7ff fd50 	bl	8000550 <LL_GPIO_SetPinMode>

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020000 	.word	0x40020000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <LL_RCC_SetI2SClockSource>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_I2SSRC, Source);
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <LL_RCC_SetI2SClockSource+0x24>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000ae8:	4904      	ldr	r1, [pc, #16]	; (8000afc <LL_RCC_SetI2SClockSource+0x24>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	608b      	str	r3, [r1, #8]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 fb0e 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_I2C_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b94:	2312      	movs	r3, #18
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <HAL_I2C_MspInit+0x8c>)
 8000bac:	f000 fb1a 	bl	80011e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_I2C_MspInit+0x88>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ca8 <HAL_I2S_MspInit+0xc8>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d14d      	bne.n	8000c9e <HAL_I2S_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    LL_RCC_SetI2SClockSource(LL_RCC_I2S1_CLKSOURCE_PLLI2S);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff68 	bl	8000ad8 <LL_RCC_SetI2SClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a26      	ldr	r2, [pc, #152]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_I2S_MspInit+0xcc>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <HAL_I2S_MspInit+0xd0>)
 8000c78:	f000 fab4 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000c7c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <HAL_I2S_MspInit+0xd4>)
 8000c9a:	f000 faa3 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40003c00 	.word	0x40003c00
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_SPI_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12b      	bne.n	8000d32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_SPI_MspInit+0x88>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23e0      	movs	r3, #224	; 0xe0
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d22:	2305      	movs	r3, #5
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	f000 fa59 	bl	80011e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013000 	.word	0x40013000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d94:	f000 f8d0 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f000 fe3f 	bl	8001a24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000058c 	.word	0x2000058c

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f006 fc66 	bl	80076b0 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200000ac 	.word	0x200000ac
 8000e18:	200008a0 	.word	0x200008a0

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f006 fc25 	bl	80076bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fc01 	bl	8000678 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e84:	080078f0 	.word	0x080078f0
  ldr r2, =_sbss
 8000e88:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e8c:	200008a0 	.word	0x200008a0

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fe1a 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200001b0 	.word	0x200001b0

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200001b0 	.word	0x200001b0

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e16b      	b.n	80014d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 815a 	bne.w	80014d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80b4 	beq.w	80014d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b60      	ldr	r3, [pc, #384]	; (80014f0 <HAL_GPIO_Init+0x30c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a5f      	ldr	r2, [pc, #380]	; (80014f0 <HAL_GPIO_Init+0x30c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <HAL_GPIO_Init+0x30c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a5b      	ldr	r2, [pc, #364]	; (80014f4 <HAL_GPIO_Init+0x310>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a52      	ldr	r2, [pc, #328]	; (80014f8 <HAL_GPIO_Init+0x314>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d02b      	beq.n	800140a <HAL_GPIO_Init+0x226>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a51      	ldr	r2, [pc, #324]	; (80014fc <HAL_GPIO_Init+0x318>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d025      	beq.n	8001406 <HAL_GPIO_Init+0x222>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a50      	ldr	r2, [pc, #320]	; (8001500 <HAL_GPIO_Init+0x31c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01f      	beq.n	8001402 <HAL_GPIO_Init+0x21e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x320>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x21a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <HAL_GPIO_Init+0x324>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x216>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_GPIO_Init+0x328>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x212>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x32c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x330>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x20a>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00e      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013ee:	2308      	movs	r3, #8
 80013f0:	e00c      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e00a      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013f6:	2305      	movs	r3, #5
 80013f8:	e008      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013fe:	2303      	movs	r3, #3
 8001400:	e004      	b.n	800140c <HAL_GPIO_Init+0x228>
 8001402:	2302      	movs	r3, #2
 8001404:	e002      	b.n	800140c <HAL_GPIO_Init+0x228>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x228>
 800140a:	2300      	movs	r3, #0
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f002 0203 	and.w	r2, r2, #3
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	4093      	lsls	r3, r2
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141c:	4935      	ldr	r1, [pc, #212]	; (80014f4 <HAL_GPIO_Init+0x310>)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_GPIO_Init+0x334>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144e:	4a32      	ldr	r2, [pc, #200]	; (8001518 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_GPIO_Init+0x334>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_GPIO_Init+0x334>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a2:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_GPIO_Init+0x334>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <HAL_GPIO_Init+0x334>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <HAL_GPIO_Init+0x334>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3301      	adds	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	f67f ae90 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40021400 	.word	0x40021400
 8001510:	40021800 	.word	0x40021800
 8001514:	40021c00 	.word	0x40021c00
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800154e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001550:	b08f      	sub	sp, #60	; 0x3c
 8001552:	af0a      	add	r7, sp, #40	; 0x28
 8001554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e054      	b.n	800160a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f005 fdee 	bl	800715c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 ff35 	bl	800440e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015be:	e885 0003 	stmia.w	r5, {r0, r1}
 80015c2:	1d33      	adds	r3, r6, #4
 80015c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f002 feaf 	bl	800432a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 ff2c 	bl	8004430 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	687e      	ldr	r6, [r7, #4]
 80015e0:	466d      	mov	r5, sp
 80015e2:	f106 0410 	add.w	r4, r6, #16
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f6:	1d33      	adds	r3, r6, #4
 80015f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f003 f892 	bl	8004724 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001612 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b089      	sub	sp, #36	; 0x24
 8001616:	af04      	add	r7, sp, #16
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	4603      	mov	r3, r0
 8001622:	70fb      	strb	r3, [r7, #3]
 8001624:	460b      	mov	r3, r1
 8001626:	70bb      	strb	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_HCD_HC_Init+0x28>
 8001636:	2302      	movs	r3, #2
 8001638:	e076      	b.n	8001728 <HAL_HCD_HC_Init+0x116>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	212c      	movs	r1, #44	; 0x2c
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	333d      	adds	r3, #61	; 0x3d
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	4413      	add	r3, r2
 8001660:	3338      	adds	r3, #56	; 0x38
 8001662:	787a      	ldrb	r2, [r7, #1]
 8001664:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	212c      	movs	r1, #44	; 0x2c
 800166c:	fb01 f303 	mul.w	r3, r1, r3
 8001670:	4413      	add	r3, r2
 8001672:	3340      	adds	r3, #64	; 0x40
 8001674:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001676:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	212c      	movs	r1, #44	; 0x2c
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	3339      	adds	r3, #57	; 0x39
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	212c      	movs	r1, #44	; 0x2c
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	333f      	adds	r3, #63	; 0x3f
 8001698:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800169c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	78ba      	ldrb	r2, [r7, #2]
 80016a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016a6:	b2d0      	uxtb	r0, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	333a      	adds	r3, #58	; 0x3a
 80016b4:	4602      	mov	r2, r0
 80016b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da09      	bge.n	80016d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	212c      	movs	r1, #44	; 0x2c
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	333b      	adds	r3, #59	; 0x3b
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e008      	b.n	80016e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	333b      	adds	r3, #59	; 0x3b
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	333c      	adds	r3, #60	; 0x3c
 80016f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	787c      	ldrb	r4, [r7, #1]
 8001700:	78ba      	ldrb	r2, [r7, #2]
 8001702:	78f9      	ldrb	r1, [r7, #3]
 8001704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f003 f97f 	bl	8004a18 <USB_HC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}

08001730 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_HCD_HC_Halt+0x1e>
 800174a:	2302      	movs	r3, #2
 800174c:	e00f      	b.n	800176e <HAL_HCD_HC_Halt+0x3e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fbbb 	bl	8004eda <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4603      	mov	r3, r0
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	460b      	mov	r3, r1
 800178c:	70bb      	strb	r3, [r7, #2]
 800178e:	4613      	mov	r3, r2
 8001790:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	333b      	adds	r3, #59	; 0x3b
 80017a0:	78ba      	ldrb	r2, [r7, #2]
 80017a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	333f      	adds	r3, #63	; 0x3f
 80017b2:	787a      	ldrb	r2, [r7, #1]
 80017b4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017b6:	7c3b      	ldrb	r3, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d112      	bne.n	80017e2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	3342      	adds	r3, #66	; 0x42
 80017ca:	2203      	movs	r2, #3
 80017cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	212c      	movs	r1, #44	; 0x2c
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	333d      	adds	r3, #61	; 0x3d
 80017dc:	7f3a      	ldrb	r2, [r7, #28]
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e008      	b.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3342      	adds	r3, #66	; 0x42
 80017f0:	2202      	movs	r2, #2
 80017f2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	f200 80c6 	bhi.w	8001988 <HAL_HCD_HC_SubmitRequest+0x210>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	08001975 	.word	0x08001975
 800180c:	08001879 	.word	0x08001879
 8001810:	080018f7 	.word	0x080018f7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001814:	7c3b      	ldrb	r3, [r7, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	f040 80b8 	bne.w	800198c <HAL_HCD_HC_SubmitRequest+0x214>
 800181c:	78bb      	ldrb	r3, [r7, #2]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80b4 	bne.w	800198c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001824:	8b3b      	ldrh	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d108      	bne.n	800183c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	3355      	adds	r3, #85	; 0x55
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3355      	adds	r3, #85	; 0x55
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3342      	adds	r3, #66	; 0x42
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001862:	e093      	b.n	800198c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e089      	b.n	800198c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d11d      	bne.n	80018ba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3355      	adds	r3, #85	; 0x55
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018a4:	e073      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3342      	adds	r3, #66	; 0x42
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
      break;
 80018b8:	e069      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	212c      	movs	r1, #44	; 0x2c
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	3354      	adds	r3, #84	; 0x54
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3342      	adds	r3, #66	; 0x42
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e055      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3342      	adds	r3, #66	; 0x42
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
      break;
 80018f4:	e04b      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018f6:	78bb      	ldrb	r3, [r7, #2]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11d      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3355      	adds	r3, #85	; 0x55
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d109      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	212c      	movs	r1, #44	; 0x2c
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	4413      	add	r3, r2
 800191c:	3342      	adds	r3, #66	; 0x42
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001922:	e034      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3342      	adds	r3, #66	; 0x42
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]
      break;
 8001936:	e02a      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3354      	adds	r3, #84	; 0x54
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      break;
 800195e:	e016      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	212c      	movs	r1, #44	; 0x2c
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3342      	adds	r3, #66	; 0x42
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
      break;
 8001972:	e00c      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	212c      	movs	r1, #44	; 0x2c
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	3342      	adds	r3, #66	; 0x42
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
      break;
 8001986:	e002      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001988:	bf00      	nop
 800198a:	e000      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800198c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3344      	adds	r3, #68	; 0x44
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	8b3a      	ldrh	r2, [r7, #24]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	202c      	movs	r0, #44	; 0x2c
 80019a8:	fb00 f303 	mul.w	r3, r0, r3
 80019ac:	440b      	add	r3, r1
 80019ae:	334c      	adds	r3, #76	; 0x4c
 80019b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3350      	adds	r3, #80	; 0x50
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3339      	adds	r3, #57	; 0x39
 80019e4:	78fa      	ldrb	r2, [r7, #3]
 80019e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	3361      	adds	r3, #97	; 0x61
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	222c      	movs	r2, #44	; 0x2c
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	3338      	adds	r3, #56	; 0x38
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	18d1      	adds	r1, r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	f003 f90e 	bl	8004c34 <USB_HC_StartXfer>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop

08001a24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fe31 	bl	80046a2 <USB_GetMode>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	f040 80f6 	bne.w	8001c34 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fe15 	bl	800467c <USB_ReadInterrupts>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80ec 	beq.w	8001c32 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fe0c 	bl	800467c <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a6e:	d104      	bne.n	8001a7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fdfc 	bl	800467c <USB_ReadInterrupts>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a8e:	d104      	bne.n	8001a9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fdec 	bl	800467c <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aae:	d104      	bne.n	8001aba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fddc 	bl	800467c <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d103      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fdce 	bl	800467c <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aea:	d11c      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001af4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10f      	bne.n	8001b26 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b06:	2110      	movs	r1, #16
 8001b08:	6938      	ldr	r0, [r7, #16]
 8001b0a:	f002 fcdd 	bl	80044c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b0e:	6938      	ldr	r0, [r7, #16]
 8001b10:	f002 fcfe 	bl	8004510 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 feb6 	bl	800488c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f005 fb99 	bl	8007258 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fda6 	bl	800467c <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3a:	d102      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f001 fa03 	bl	8002f48 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fd98 	bl	800467c <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d106      	bne.n	8001b64 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f005 fb62 	bl	8007220 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2208      	movs	r2, #8
 8001b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fd87 	bl	800467c <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d101      	bne.n	8001b7c <HAL_HCD_IRQHandler+0x158>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_HCD_IRQHandler+0x15a>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0210 	bic.w	r2, r2, #16
 8001b90:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f001 f906 	bl	8002da4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0210 	orr.w	r2, r2, #16
 8001ba6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fd65 	bl	800467c <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bbc:	d13a      	bne.n	8001c34 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 f978 	bl	8004eb8 <USB_HC_ReadInterrupt>
 8001bc8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e025      	b.n	8001c1c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfa:	d106      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8ab 	bl	8001d5e <HCD_HC_IN_IRQHandler>
 8001c08:	e005      	b.n	8001c16 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fcc6 	bl	80025a2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3d4      	bcc.n	8001bd0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	e000      	b.n	8001c34 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c32:	bf00      	nop
    }
  }
}
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_HCD_Start+0x16>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e013      	b.n	8001c78 <HAL_HCD_Start+0x3e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 fe78 	bl	8004954 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fbbf 	bl	80043ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_HCD_Stop+0x16>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e00d      	b.n	8001cb2 <HAL_HCD_Stop+0x32>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fa72 	bl	800518c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fe1a 	bl	8004900 <USB_ResetPort>
 8001ccc:	4603      	mov	r3, r0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3360      	adds	r3, #96	; 0x60
 8001cf0:	781b      	ldrb	r3, [r3, #0]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	212c      	movs	r1, #44	; 0x2c
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	3350      	adds	r3, #80	; 0x50
 8001d18:	681b      	ldr	r3, [r3, #0]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fe5e 	bl	80049f4 <USB_GetCurrentFrame>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 fe39 	bl	80049c6 <USB_GetHostSpeed>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d119      	bne.n	8001dc2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	0151      	lsls	r1, r2, #5
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	440a      	add	r2, r1
 8001db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	60d3      	str	r3, [r2, #12]
 8001dc0:	e101      	b.n	8001fc6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d12b      	bne.n	8001e32 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	461a      	mov	r2, r3
 8001de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3361      	adds	r3, #97	; 0x61
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	0151      	lsls	r1, r2, #5
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	440a      	add	r2, r1
 8001e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f855 	bl	8004eda <USB_HC_Halt>
 8001e30:	e0c9      	b.n	8001fc6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d109      	bne.n	8001e5c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	2320      	movs	r3, #32
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0b4      	b.n	8001fc6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d133      	bne.n	8001eda <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	0151      	lsls	r1, r2, #5
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	440a      	add	r2, r1
 8001e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3361      	adds	r3, #97	; 0x61
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f801 	bl	8004eda <USB_HC_Halt>
 8001ed8:	e075      	b.n	8001fc6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef0:	d134      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	0151      	lsls	r1, r2, #5
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	440a      	add	r2, r1
 8001f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0c:	f043 0302 	orr.w	r3, r3, #2
 8001f10:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3361      	adds	r3, #97	; 0x61
 8001f20:	2208      	movs	r2, #8
 8001f22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	015a      	lsls	r2, r3, #5
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f30:	461a      	mov	r2, r3
 8001f32:	2310      	movs	r3, #16
 8001f34:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	461a      	mov	r2, r3
 8001f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 ffc0 	bl	8004eda <USB_HC_Halt>
 8001f5a:	e034      	b.n	8001fc6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d129      	bne.n	8001fc6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	0151      	lsls	r1, r2, #5
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	440a      	add	r2, r1
 8001f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	212c      	movs	r1, #44	; 0x2c
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3361      	adds	r3, #97	; 0x61
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 ff93 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fdc:	d122      	bne.n	8002024 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	0151      	lsls	r1, r2, #5
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f002 ff66 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201a:	461a      	mov	r2, r3
 800201c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002020:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002022:	e2ba      	b.n	800259a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	f040 811b 	bne.w	8002272 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d019      	beq.n	8002078 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	212c      	movs	r1, #44	; 0x2c
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	4413      	add	r3, r2
 8002050:	3348      	adds	r3, #72	; 0x48
 8002052:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	0159      	lsls	r1, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	440b      	add	r3, r1
 800205c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002066:	1ad2      	subs	r2, r2, r3
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	202c      	movs	r0, #44	; 0x2c
 800206e:	fb00 f303 	mul.w	r3, r0, r3
 8002072:	440b      	add	r3, r1
 8002074:	3350      	adds	r3, #80	; 0x50
 8002076:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3361      	adds	r3, #97	; 0x61
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	335c      	adds	r3, #92	; 0x5c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	461a      	mov	r2, r3
 80020aa:	2301      	movs	r3, #1
 80020ac:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	333f      	adds	r3, #63	; 0x3f
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	333f      	adds	r3, #63	; 0x3f
 80020d0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d121      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	0151      	lsls	r1, r2, #5
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	440a      	add	r2, r1
 80020ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f002 feea 	bl	8004eda <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	2310      	movs	r3, #16
 8002116:	6093      	str	r3, [r2, #8]
 8002118:	e066      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	333f      	adds	r3, #63	; 0x3f
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d127      	bne.n	800217e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	0151      	lsls	r1, r2, #5
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	440a      	add	r2, r1
 8002144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002148:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800214c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3360      	adds	r3, #96	; 0x60
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	b2d9      	uxtb	r1, r3
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	202c      	movs	r0, #44	; 0x2c
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	4413      	add	r3, r2
 8002170:	3360      	adds	r3, #96	; 0x60
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f005 f87c 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
 800217c:	e034      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	333f      	adds	r3, #63	; 0x3f
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12a      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3354      	adds	r3, #84	; 0x54
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2d8      	uxtb	r0, r3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3354      	adds	r3, #84	; 0x54
 80021c8:	4602      	mov	r2, r0
 80021ca:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	b2d9      	uxtb	r1, r3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	202c      	movs	r0, #44	; 0x2c
 80021d6:	fb00 f303 	mul.w	r3, r0, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3360      	adds	r3, #96	; 0x60
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 f846 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d12b      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3348      	adds	r3, #72	; 0x48
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	202c      	movs	r0, #44	; 0x2c
 8002206:	fb00 f202 	mul.w	r2, r0, r2
 800220a:	440a      	add	r2, r1
 800220c:	3240      	adds	r2, #64	; 0x40
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	fbb3 f3f2 	udiv	r3, r3, r2
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 81be 	beq.w	800259a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3354      	adds	r3, #84	; 0x54
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2d8      	uxtb	r0, r3
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3354      	adds	r3, #84	; 0x54
 8002242:	4602      	mov	r2, r0
 8002244:	701a      	strb	r2, [r3, #0]
}
 8002246:	e1a8      	b.n	800259a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3354      	adds	r3, #84	; 0x54
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2d8      	uxtb	r0, r3
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	3354      	adds	r3, #84	; 0x54
 800226c:	4602      	mov	r2, r0
 800226e:	701a      	strb	r2, [r3, #0]
}
 8002270:	e193      	b.n	800259a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	f040 8106 	bne.w	8002496 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	0151      	lsls	r1, r2, #5
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	440a      	add	r2, r1
 80022a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a4:	f023 0302 	bic.w	r3, r3, #2
 80022a8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3361      	adds	r3, #97	; 0x61
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d109      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	212c      	movs	r1, #44	; 0x2c
 80022c4:	fb01 f303 	mul.w	r3, r1, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	3360      	adds	r3, #96	; 0x60
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e0c9      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d109      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	2205      	movs	r2, #5
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e0b5      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3361      	adds	r3, #97	; 0x61
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b06      	cmp	r3, #6
 800230c:	d009      	beq.n	8002322 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800231e:	2b08      	cmp	r3, #8
 8002320:	d150      	bne.n	80023c4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	202c      	movs	r0, #44	; 0x2c
 800233a:	fb00 f303 	mul.w	r3, r0, r3
 800233e:	440b      	add	r3, r1
 8002340:	335c      	adds	r3, #92	; 0x5c
 8002342:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	212c      	movs	r1, #44	; 0x2c
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	335c      	adds	r3, #92	; 0x5c
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d912      	bls.n	800237e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	335c      	adds	r3, #92	; 0x5c
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3360      	adds	r3, #96	; 0x60
 8002378:	2204      	movs	r2, #4
 800237a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800237c:	e073      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023a6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ae:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023c2:	e050      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3361      	adds	r3, #97	; 0x61
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d122      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3360      	adds	r3, #96	; 0x60
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002400:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002408:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e023      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3361      	adds	r3, #97	; 0x61
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d119      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	335c      	adds	r3, #92	; 0x5c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	202c      	movs	r0, #44	; 0x2c
 800244a:	fb00 f303 	mul.w	r3, r0, r3
 800244e:	440b      	add	r3, r1
 8002450:	335c      	adds	r3, #92	; 0x5c
 8002452:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3360      	adds	r3, #96	; 0x60
 8002462:	2204      	movs	r2, #4
 8002464:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2302      	movs	r3, #2
 8002476:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	b2d9      	uxtb	r1, r3
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	202c      	movs	r0, #44	; 0x2c
 8002482:	fb00 f303 	mul.w	r3, r0, r3
 8002486:	4413      	add	r3, r2
 8002488:	3360      	adds	r3, #96	; 0x60
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f004 fef0 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002494:	e081      	b.n	800259a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d176      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	333f      	adds	r3, #63	; 0x3f
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d121      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	335c      	adds	r3, #92	; 0x5c
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	0151      	lsls	r1, r2, #5
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	440a      	add	r2, r1
 80024e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fcec 	bl	8004eda <USB_HC_Halt>
 8002502:	e041      	b.n	8002588 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	333f      	adds	r3, #63	; 0x3f
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	333f      	adds	r3, #63	; 0x3f
 8002526:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002528:	2b02      	cmp	r3, #2
 800252a:	d12d      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	335c      	adds	r3, #92	; 0x5c
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d120      	bne.n	8002588 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	2203      	movs	r2, #3
 8002556:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	0151      	lsls	r1, r2, #5
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	440a      	add	r2, r1
 800256e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fca9 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	461a      	mov	r2, r3
 8002596:	2310      	movs	r3, #16
 8002598:	6093      	str	r3, [r2, #8]
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b088      	sub	sp, #32
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d119      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	2304      	movs	r3, #4
 80025e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	0151      	lsls	r1, r2, #5
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	440a      	add	r2, r1
 80025fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002604:	e3ca      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b20      	cmp	r3, #32
 800261a:	d13e      	bne.n	800269a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2320      	movs	r3, #32
 800262c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	333d      	adds	r3, #61	; 0x3d
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	f040 83ac 	bne.w	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	333d      	adds	r3, #61	; 0x3d
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	440a      	add	r2, r1
 800267e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f002 fc21 	bl	8004eda <USB_HC_Halt>
}
 8002698:	e380      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b0:	d122      	bne.n	80026f8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	0151      	lsls	r1, r2, #5
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	440a      	add	r2, r1
 80026c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fbfc 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f4:	6093      	str	r3, [r2, #8]
}
 80026f6:	e351      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d150      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	335c      	adds	r3, #92	; 0x5c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b40      	cmp	r3, #64	; 0x40
 8002734:	d111      	bne.n	800275a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	333d      	adds	r3, #61	; 0x3d
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	0151      	lsls	r1, r2, #5
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	440a      	add	r2, r1
 8002770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fba8 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2301      	movs	r3, #1
 800279a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3361      	adds	r3, #97	; 0x61
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
}
 80027ae:	e2f5      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d13c      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3361      	adds	r3, #97	; 0x61
 80027d4:	2204      	movs	r2, #4
 80027d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	333d      	adds	r3, #61	; 0x3d
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	440a      	add	r2, r1
 8002812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fb57 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	6093      	str	r3, [r2, #8]
}
 800283e:	e2ad      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b08      	cmp	r3, #8
 8002854:	d12a      	bne.n	80028ac <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	461a      	mov	r2, r3
 8002864:	2308      	movs	r3, #8
 8002866:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	0151      	lsls	r1, r2, #5
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	440a      	add	r2, r1
 800287e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fb21 	bl	8004eda <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3361      	adds	r3, #97	; 0x61
 80028a6:	2205      	movs	r2, #5
 80028a8:	701a      	strb	r2, [r3, #0]
}
 80028aa:	e277      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d150      	bne.n	8002964 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	335c      	adds	r3, #92	; 0x5c
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3361      	adds	r3, #97	; 0x61
 80028e2:	2203      	movs	r2, #3
 80028e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	333d      	adds	r3, #61	; 0x3d
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d112      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	333c      	adds	r3, #60	; 0x3c
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	333d      	adds	r3, #61	; 0x3d
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fac5 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2310      	movs	r3, #16
 8002960:	6093      	str	r3, [r2, #8]
}
 8002962:	e21b      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	2b80      	cmp	r3, #128	; 0x80
 8002978:	d174      	bne.n	8002a64 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d121      	bne.n	80029c6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3361      	adds	r3, #97	; 0x61
 8002990:	2206      	movs	r2, #6
 8002992:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	0151      	lsls	r1, r2, #5
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	440a      	add	r2, r1
 80029aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ae:	f043 0302 	orr.w	r3, r3, #2
 80029b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f002 fa8b 	bl	8004eda <USB_HC_Halt>
 80029c4:	e044      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	335c      	adds	r3, #92	; 0x5c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	202c      	movs	r0, #44	; 0x2c
 80029de:	fb00 f303 	mul.w	r3, r0, r3
 80029e2:	440b      	add	r3, r1
 80029e4:	335c      	adds	r3, #92	; 0x5c
 80029e6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d920      	bls.n	8002a3e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	335c      	adds	r3, #92	; 0x5c
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	b2d9      	uxtb	r1, r3
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	202c      	movs	r0, #44	; 0x2c
 8002a2a:	fb00 f303 	mul.w	r3, r0, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f004 fc1c 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a3c:	e008      	b.n	8002a50 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	6093      	str	r3, [r2, #8]
}
 8002a62:	e19b      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d134      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fa17 	bl	8004eda <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2310      	movs	r3, #16
 8002abc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3361      	adds	r3, #97	; 0x61
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	701a      	strb	r2, [r3, #0]
}
 8002ae4:	e15a      	b.n	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f040 814f 	bne.w	8002d9c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	0151      	lsls	r1, r2, #5
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	440a      	add	r2, r1
 8002b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b18:	f023 0302 	bic.w	r3, r3, #2
 8002b1c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d17d      	bne.n	8002c2e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	333f      	adds	r3, #63	; 0x3f
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d00a      	beq.n	8002b6e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	333f      	adds	r3, #63	; 0x3f
 8002b66:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	f040 8100 	bne.w	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d113      	bne.n	8002b9e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3355      	adds	r3, #85	; 0x55
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2d8      	uxtb	r0, r3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3355      	adds	r3, #85	; 0x55
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	f040 80e3 	bne.w	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	334c      	adds	r3, #76	; 0x4c
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80d8 	beq.w	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	334c      	adds	r3, #76	; 0x4c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	202c      	movs	r0, #44	; 0x2c
 8002bd4:	fb00 f202 	mul.w	r2, r0, r2
 8002bd8:	440a      	add	r2, r1
 8002bda:	3240      	adds	r2, #64	; 0x40
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	3b01      	subs	r3, #1
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	202c      	movs	r0, #44	; 0x2c
 8002be8:	fb00 f202 	mul.w	r2, r0, r2
 8002bec:	440a      	add	r2, r1
 8002bee:	3240      	adds	r2, #64	; 0x40
 8002bf0:	8812      	ldrh	r2, [r2, #0]
 8002bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80b5 	beq.w	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3355      	adds	r3, #85	; 0x55
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f083 0301 	eor.w	r3, r3, #1
 8002c18:	b2d8      	uxtb	r0, r3
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3355      	adds	r3, #85	; 0x55
 8002c28:	4602      	mov	r2, r0
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e09f      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d109      	bne.n	8002c56 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3360      	adds	r3, #96	; 0x60
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e08b      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3361      	adds	r3, #97	; 0x61
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d109      	bne.n	8002c7e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3360      	adds	r3, #96	; 0x60
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e077      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3361      	adds	r3, #97	; 0x61
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d109      	bne.n	8002ca6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3360      	adds	r3, #96	; 0x60
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e063      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3361      	adds	r3, #97	; 0x61
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d009      	beq.n	8002cce <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3361      	adds	r3, #97	; 0x61
 8002cc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d14f      	bne.n	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	202c      	movs	r0, #44	; 0x2c
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	440b      	add	r3, r1
 8002cec:	335c      	adds	r3, #92	; 0x5c
 8002cee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	335c      	adds	r3, #92	; 0x5c
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d912      	bls.n	8002d2a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	335c      	adds	r3, #92	; 0x5c
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3360      	adds	r3, #96	; 0x60
 8002d24:	2204      	movs	r2, #4
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e021      	b.n	8002d6e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	3360      	adds	r3, #96	; 0x60
 8002d38:	2202      	movs	r2, #2
 8002d3a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d52:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	b2d9      	uxtb	r1, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	202c      	movs	r0, #44	; 0x2c
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3360      	adds	r3, #96	; 0x60
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f004 fa6c 	bl	8007274 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	0c5b      	lsrs	r3, r3, #17
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d004      	beq.n	8002dea <HCD_RXQLVL_IRQHandler+0x46>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	f000 80a9 	beq.w	8002f3a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002de8:	e0aa      	b.n	8002f40 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a6 	beq.w	8002f3e <HCD_RXQLVL_IRQHandler+0x19a>
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3344      	adds	r3, #68	; 0x44
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 809b 	beq.w	8002f3e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3350      	adds	r3, #80	; 0x50
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	202c      	movs	r0, #44	; 0x2c
 8002e22:	fb00 f303 	mul.w	r3, r0, r3
 8002e26:	440b      	add	r3, r1
 8002e28:	334c      	adds	r3, #76	; 0x4c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d87a      	bhi.n	8002f26 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6818      	ldr	r0, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3344      	adds	r3, #68	; 0x44
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	b292      	uxth	r2, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f001 fbbf 	bl	80045cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3344      	adds	r3, #68	; 0x44
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	441a      	add	r2, r3
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	202c      	movs	r0, #44	; 0x2c
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	440b      	add	r3, r1
 8002e6e:	3344      	adds	r3, #68	; 0x44
 8002e70:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3350      	adds	r3, #80	; 0x50
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	441a      	add	r2, r3
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	202c      	movs	r0, #44	; 0x2c
 8002e8c:	fb00 f303 	mul.w	r3, r0, r3
 8002e90:	440b      	add	r3, r1
 8002e92:	3350      	adds	r3, #80	; 0x50
 8002e94:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	0cdb      	lsrs	r3, r3, #19
 8002ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eaa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d13c      	bne.n	8002f3e <HCD_RXQLVL_IRQHandler+0x19a>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d039      	beq.n	8002f3e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3354      	adds	r3, #84	; 0x54
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	f083 0301 	eor.w	r3, r3, #1
 8002f10:	b2d8      	uxtb	r0, r3
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3354      	adds	r3, #84	; 0x54
 8002f20:	4602      	mov	r2, r0
 8002f22:	701a      	strb	r2, [r3, #0]
      break;
 8002f24:	e00b      	b.n	8002f3e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	212c      	movs	r1, #44	; 0x2c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	2204      	movs	r2, #4
 8002f36:	701a      	strb	r2, [r3, #0]
      break;
 8002f38:	e001      	b.n	8002f3e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f3e:	bf00      	nop
  }
}
 8002f40:	bf00      	nop
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f74:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d10b      	bne.n	8002f98 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f004 f956 	bl	800723c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f043 0302 	orr.w	r3, r3, #2
 8002f96:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d132      	bne.n	8003008 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d126      	bne.n	8003002 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d113      	bne.n	8002fe4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fc6:	d106      	bne.n	8002fd6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fc5c 	bl	800488c <USB_InitFSLSPClkSel>
 8002fd4:	e011      	b.n	8002ffa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fc55 	bl	800488c <USB_InitFSLSPClkSel>
 8002fe2:	e00a      	b.n	8002ffa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ff8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f004 f948 	bl	8007290 <HAL_HCD_PortEnabled_Callback>
 8003000:	e002      	b.n	8003008 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f004 f952 	bl	80072ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b20      	cmp	r3, #32
 8003010:	d103      	bne.n	800301a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6013      	str	r3, [r2, #0]
}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e12b      	b.n	800329a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fd7a 	bl	8000b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003094:	f000 fdbc 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a81      	ldr	r2, [pc, #516]	; (80032a4 <HAL_I2C_Init+0x274>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d807      	bhi.n	80030b4 <HAL_I2C_Init+0x84>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a80      	ldr	r2, [pc, #512]	; (80032a8 <HAL_I2C_Init+0x278>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e006      	b.n	80030c2 <HAL_I2C_Init+0x92>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a7d      	ldr	r2, [pc, #500]	; (80032ac <HAL_I2C_Init+0x27c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0e7      	b.n	800329a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a78      	ldr	r2, [pc, #480]	; (80032b0 <HAL_I2C_Init+0x280>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a6a      	ldr	r2, [pc, #424]	; (80032a4 <HAL_I2C_Init+0x274>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d802      	bhi.n	8003104 <HAL_I2C_Init+0xd4>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3301      	adds	r3, #1
 8003102:	e009      	b.n	8003118 <HAL_I2C_Init+0xe8>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a69      	ldr	r2, [pc, #420]	; (80032b4 <HAL_I2C_Init+0x284>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	3301      	adds	r3, #1
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800312a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	495c      	ldr	r1, [pc, #368]	; (80032a4 <HAL_I2C_Init+0x274>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d819      	bhi.n	800316c <HAL_I2C_Init+0x13c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e59      	subs	r1, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fbb1 f3f3 	udiv	r3, r1, r3
 8003146:	1c59      	adds	r1, r3, #1
 8003148:	f640 73fc 	movw	r3, #4092	; 0xffc
 800314c:	400b      	ands	r3, r1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_I2C_Init+0x138>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e59      	subs	r1, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	e051      	b.n	800320c <HAL_I2C_Init+0x1dc>
 8003168:	2304      	movs	r3, #4
 800316a:	e04f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d111      	bne.n	8003198 <HAL_I2C_Init+0x168>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e012      	b.n	80031be <HAL_I2C_Init+0x18e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x196>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <HAL_I2C_Init+0x1bc>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e58      	subs	r0, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	e00f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6809      	ldr	r1, [r1, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800323a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6911      	ldr	r1, [r2, #16]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	430b      	orrs	r3, r1
 800324e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	000186a0 	.word	0x000186a0
 80032a8:	001e847f 	.word	0x001e847f
 80032ac:	003d08ff 	.word	0x003d08ff
 80032b0:	431bde83 	.word	0x431bde83
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e128      	b.n	800351c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a90      	ldr	r2, [pc, #576]	; (8003524 <HAL_I2S_Init+0x26c>)
 80032e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fc7b 	bl	8000be0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003300:	f023 030f 	bic.w	r3, r3, #15
 8003304:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2202      	movs	r2, #2
 800330c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d060      	beq.n	80033d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d102      	bne.n	8003324 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800331e:	2310      	movs	r3, #16
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e001      	b.n	8003328 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2b20      	cmp	r3, #32
 800332e:	d802      	bhi.n	8003336 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003336:	2001      	movs	r0, #1
 8003338:	f000 fc7e 	bl	8003c38 <HAL_RCCEx_GetPeriphCLKFreq>
 800333c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d125      	bne.n	8003394 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	fbb2 f2f3 	udiv	r2, r2, r3
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
 800336c:	3305      	adds	r3, #5
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e01f      	b.n	80033b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	fbb2 f2f3 	udiv	r2, r2, r3
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	461a      	mov	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	3305      	adds	r3, #5
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	e00e      	b.n	80033b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fbb2 f2f3 	udiv	r2, r2, r3
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	461a      	mov	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	3305      	adds	r3, #5
 80033b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4a5c      	ldr	r2, [pc, #368]	; (8003528 <HAL_I2S_Init+0x270>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	08db      	lsrs	r3, r3, #3
 80033bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e003      	b.n	80033e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033d8:	2302      	movs	r3, #2
 80033da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d902      	bls.n	80033ec <HAL_I2S_Init+0x134>
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2bff      	cmp	r3, #255	; 0xff
 80033ea:	d907      	bls.n	80033fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e08f      	b.n	800351c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	ea42 0103 	orr.w	r1, r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	430a      	orrs	r2, r1
 800340e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800341a:	f023 030f 	bic.w	r3, r3, #15
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6851      	ldr	r1, [r2, #4]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68d2      	ldr	r2, [r2, #12]
 800342c:	4311      	orrs	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6992      	ldr	r2, [r2, #24]
 8003432:	430a      	orrs	r2, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d161      	bne.n	800350c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a38      	ldr	r2, [pc, #224]	; (800352c <HAL_I2S_Init+0x274>)
 800344c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <HAL_I2S_Init+0x278>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_I2S_Init+0x1a4>
 8003458:	4b36      	ldr	r3, [pc, #216]	; (8003534 <HAL_I2S_Init+0x27c>)
 800345a:	e001      	b.n	8003460 <HAL_I2S_Init+0x1a8>
 800345c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4932      	ldr	r1, [pc, #200]	; (8003530 <HAL_I2S_Init+0x278>)
 8003468:	428a      	cmp	r2, r1
 800346a:	d101      	bne.n	8003470 <HAL_I2S_Init+0x1b8>
 800346c:	4a31      	ldr	r2, [pc, #196]	; (8003534 <HAL_I2S_Init+0x27c>)
 800346e:	e001      	b.n	8003474 <HAL_I2S_Init+0x1bc>
 8003470:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003474:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_I2S_Init+0x278>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d101      	bne.n	800348c <HAL_I2S_Init+0x1d4>
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_I2S_Init+0x27c>)
 800348a:	e001      	b.n	8003490 <HAL_I2S_Init+0x1d8>
 800348c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003490:	2202      	movs	r2, #2
 8003492:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a25      	ldr	r2, [pc, #148]	; (8003530 <HAL_I2S_Init+0x278>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d101      	bne.n	80034a2 <HAL_I2S_Init+0x1ea>
 800349e:	4b25      	ldr	r3, [pc, #148]	; (8003534 <HAL_I2S_Init+0x27c>)
 80034a0:	e001      	b.n	80034a6 <HAL_I2S_Init+0x1ee>
 80034a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b2:	d003      	beq.n	80034bc <HAL_I2S_Init+0x204>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e001      	b.n	80034c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034c4:	2300      	movs	r3, #0
 80034c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034d2:	4313      	orrs	r3, r2
 80034d4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034dc:	4313      	orrs	r3, r2
 80034de:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a0d      	ldr	r2, [pc, #52]	; (8003530 <HAL_I2S_Init+0x278>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d101      	bne.n	8003504 <HAL_I2S_Init+0x24c>
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_I2S_Init+0x27c>)
 8003502:	e001      	b.n	8003508 <HAL_I2S_Init+0x250>
 8003504:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003508:	897a      	ldrh	r2, [r7, #10]
 800350a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	0800362f 	.word	0x0800362f
 8003528:	cccccccd 	.word	0xcccccccd
 800352c:	08003745 	.word	0x08003745
 8003530:	40003800 	.word	0x40003800
 8003534:	40003400 	.word	0x40003400

08003538 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffb8 	bl	8003538 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	b292      	uxth	r2, r2
 80035e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	1c9a      	adds	r2, r3, #2
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10e      	bne.n	8003626 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003616:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff93 	bl	800354c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b04      	cmp	r3, #4
 8003648:	d13a      	bne.n	80036c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d109      	bne.n	8003668 <I2S_IRQHandler+0x3a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d102      	bne.n	8003668 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffb4 	bl	80035d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d126      	bne.n	80036c0 <I2S_IRQHandler+0x92>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d11f      	bne.n	80036c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003690:	2300      	movs	r3, #0
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff50 	bl	8003560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d136      	bne.n	800373a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d109      	bne.n	80036ea <I2S_IRQHandler+0xbc>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d102      	bne.n	80036ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff45 	bl	8003574 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d122      	bne.n	800373a <I2S_IRQHandler+0x10c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d11b      	bne.n	800373a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003710:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff13 	bl	8003560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4aa2      	ldr	r2, [pc, #648]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800375e:	4ba2      	ldr	r3, [pc, #648]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003760:	e001      	b.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a9b      	ldr	r2, [pc, #620]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d101      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800377c:	4b9a      	ldr	r3, [pc, #616]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800377e:	e001      	b.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003790:	d004      	beq.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 8099 	bne.w	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d107      	bne.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f925 	bl	8003a00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9c8 	bl	8003b60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d13a      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d035      	beq.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7e      	ldr	r2, [pc, #504]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037ee:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f0:	e001      	b.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4979      	ldr	r1, [pc, #484]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fe:	428b      	cmp	r3, r1
 8003800:	d101      	bne.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003802:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003804:	e001      	b.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800380e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0202 	orr.w	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fe88 	bl	8003560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b08      	cmp	r3, #8
 8003858:	f040 80be 	bne.w	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80b8 	beq.w	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003876:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a59      	ldr	r2, [pc, #356]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003882:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003884:	e001      	b.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4954      	ldr	r1, [pc, #336]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003892:	428b      	cmp	r3, r1
 8003894:	d101      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003896:	4b54      	ldr	r3, [pc, #336]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003898:	e001      	b.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800389a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f043 0204 	orr.w	r2, r3, #4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fe4a 	bl	8003560 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038cc:	e084      	b.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d107      	bne.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8be 	bl	8003a64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8fd 	bl	8003afc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d12f      	bne.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02a      	beq.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003924:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003932:	e001      	b.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4929      	ldr	r1, [pc, #164]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d101      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003946:	e001      	b.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003950:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f043 0202 	orr.w	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff fdfa 	bl	8003560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b08      	cmp	r3, #8
 8003974:	d131      	bne.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02c      	beq.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800398c:	e001      	b.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800398e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4912      	ldr	r1, [pc, #72]	; (80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800399a:	428b      	cmp	r3, r1
 800399c:	d101      	bne.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a0:	e001      	b.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ba:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fdc5 	bl	8003560 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d6:	e000      	b.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039d8:	bf00      	nop
}
 80039da:	bf00      	nop
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40003800 	.word	0x40003800
 80039e8:	40003400 	.word	0x40003400

080039ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	1c99      	adds	r1, r3, #2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6251      	str	r1, [r2, #36]	; 0x24
 8003a12:	881a      	ldrh	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d113      	bne.n	8003a5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ffc9 	bl	80039ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c99      	adds	r1, r3, #2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6251      	str	r1, [r2, #36]	; 0x24
 8003a76:	8819      	ldrh	r1, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <I2SEx_TxISR_I2SExt+0x90>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d101      	bne.n	8003a86 <I2SEx_TxISR_I2SExt+0x22>
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <I2SEx_TxISR_I2SExt+0x94>)
 8003a84:	e001      	b.n	8003a8a <I2SEx_TxISR_I2SExt+0x26>
 8003a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d121      	bne.n	8003aea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <I2SEx_TxISR_I2SExt+0x90>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d101      	bne.n	8003ab4 <I2SEx_TxISR_I2SExt+0x50>
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <I2SEx_TxISR_I2SExt+0x94>)
 8003ab2:	e001      	b.n	8003ab8 <I2SEx_TxISR_I2SExt+0x54>
 8003ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	490d      	ldr	r1, [pc, #52]	; (8003af4 <I2SEx_TxISR_I2SExt+0x90>)
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d101      	bne.n	8003ac8 <I2SEx_TxISR_I2SExt+0x64>
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <I2SEx_TxISR_I2SExt+0x94>)
 8003ac6:	e001      	b.n	8003acc <I2SEx_TxISR_I2SExt+0x68>
 8003ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff81 	bl	80039ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40003800 	.word	0x40003800
 8003af8:	40003400 	.word	0x40003400

08003afc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68d8      	ldr	r0, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	1c99      	adds	r1, r3, #2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b14:	b282      	uxth	r2, r0
 8003b16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ff4a 	bl	80039ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a20      	ldr	r2, [pc, #128]	; (8003bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <I2SEx_RxISR_I2SExt+0x16>
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8003b74:	e001      	b.n	8003b7a <I2SEx_RxISR_I2SExt+0x1a>
 8003b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7a:	68d8      	ldr	r0, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	1c99      	adds	r1, r3, #2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b86:	b282      	uxth	r2, r0
 8003b88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d121      	bne.n	8003be6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <I2SEx_RxISR_I2SExt+0x50>
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8003bae:	e001      	b.n	8003bb4 <I2SEx_RxISR_I2SExt+0x54>
 8003bb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	490d      	ldr	r1, [pc, #52]	; (8003bf0 <I2SEx_RxISR_I2SExt+0x90>)
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	d101      	bne.n	8003bc4 <I2SEx_RxISR_I2SExt+0x64>
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <I2SEx_RxISR_I2SExt+0x94>)
 8003bc2:	e001      	b.n	8003bc8 <I2SEx_RxISR_I2SExt+0x68>
 8003bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bcc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff03 	bl	80039ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40003800 	.word	0x40003800
 8003bf4:	40003400 	.word	0x40003400

08003bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20000000 	.word	0x20000000

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c14:	f7ff fff0 	bl	8003bf8 <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0a9b      	lsrs	r3, r3, #10
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	080078e0 	.word	0x080078e0

08003c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d13e      	bne.n	8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c56:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d12f      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c6e:	617b      	str	r3, [r7, #20]
          break;
 8003c70:	e02f      	b.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c72:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7e:	d108      	bne.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c80:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e007      	b.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ca2:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbc:	0f1b      	lsrs	r3, r3, #28
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
          break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
          break;
 8003cd0:	bf00      	nop
        }
      }
      break;
 8003cd2:	bf00      	nop
    }
  }
  return frequency;
 8003cd4:	697b      	ldr	r3, [r7, #20]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	00bb8000 	.word	0x00bb8000
 8003cec:	007a1200 	.word	0x007a1200
 8003cf0:	00f42400 	.word	0x00f42400

08003cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e07b      	b.n	8003dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d16:	d009      	beq.n	8003d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
 8003d1e:	e005      	b.n	8003d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc ffb6 	bl	8000cb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	f003 0104 	and.w	r1, r3, #4
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0210 	and.w	r2, r3, #16
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <LL_EXTI_EnableIT_0_31+0x20>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <LL_EXTI_EnableIT_0_31+0x20>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40013c00 	.word	0x40013c00

08003e2c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <LL_EXTI_DisableIT_0_31+0x24>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	4904      	ldr	r1, [pc, #16]	; (8003e50 <LL_EXTI_DisableIT_0_31+0x24>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4904      	ldr	r1, [pc, #16]	; (8003e74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]

}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40013c00 	.word	0x40013c00

08003e78 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]

}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40013c00 	.word	0x40013c00

08003ec4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]

}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	4904      	ldr	r1, [pc, #16]	; (8003f0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	4904      	ldr	r1, [pc, #16]	; (8003f34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	60cb      	str	r3, [r1, #12]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40013c00 	.word	0x40013c00

08003f38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003f40:	2300      	movs	r3, #0
 8003f42:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	791b      	ldrb	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d065      	beq.n	8004018 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d06c      	beq.n	800402e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	795b      	ldrb	r3, [r3, #5]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d01c      	beq.n	8003f96 <LL_EXTI_Init+0x5e>
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	dc25      	bgt.n	8003fac <LL_EXTI_Init+0x74>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <LL_EXTI_Init+0x32>
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d00b      	beq.n	8003f80 <LL_EXTI_Init+0x48>
 8003f68:	e020      	b.n	8003fac <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff82 	bl	8003e78 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff45 	bl	8003e08 <LL_EXTI_EnableIT_0_31>
          break;
 8003f7e:	e018      	b.n	8003fb2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff51 	bl	8003e2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff60 	bl	8003e54 <LL_EXTI_EnableEvent_0_31>
          break;
 8003f94:	e00d      	b.n	8003fb2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff34 	bl	8003e08 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff55 	bl	8003e54 <LL_EXTI_EnableEvent_0_31>
          break;
 8003faa:	e002      	b.n	8003fb2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
          break;
 8003fb0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	799b      	ldrb	r3, [r3, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d039      	beq.n	800402e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	799b      	ldrb	r3, [r3, #6]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d01c      	beq.n	8003ffc <LL_EXTI_Init+0xc4>
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	dc25      	bgt.n	8004012 <LL_EXTI_Init+0xda>
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d002      	beq.n	8003fd0 <LL_EXTI_Init+0x98>
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d00b      	beq.n	8003fe6 <LL_EXTI_Init+0xae>
 8003fce:	e020      	b.n	8004012 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff9b 	bl	8003f10 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff5e 	bl	8003ea0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003fe4:	e024      	b.n	8004030 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff6a 	bl	8003ec4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff79 	bl	8003eec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003ffa:	e019      	b.n	8004030 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff4d 	bl	8003ea0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff6e 	bl	8003eec <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004010:	e00e      	b.n	8004030 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
            break;
 8004016:	e00b      	b.n	8004030 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff05 	bl	8003e2c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff26 	bl	8003e78 <LL_EXTI_DisableEvent_0_31>
 800402c:	e000      	b.n	8004030 <LL_EXTI_Init+0xf8>
      }
 800402e:	bf00      	nop
  }
  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <LL_GPIO_SetPinMode>:
{
 800403a:	b480      	push	{r7}
 800403c:	b089      	sub	sp, #36	; 0x24
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa93 f3a3 	rbit	r3, r3
 8004054:	613b      	str	r3, [r7, #16]
  return result;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2103      	movs	r1, #3
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	401a      	ands	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	61bb      	str	r3, [r7, #24]
  return result;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]
}
 800408c:	bf00      	nop
 800408e:	3724      	adds	r7, #36	; 0x24
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <LL_GPIO_SetPinOutputType>:
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	431a      	orrs	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	605a      	str	r2, [r3, #4]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_GPIO_SetPinSpeed>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa93 f3a3 	rbit	r3, r3
 80040e2:	613b      	str	r3, [r7, #16]
  return result;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2103      	movs	r1, #3
 80040f0:	fa01 f303 	lsl.w	r3, r1, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	61bb      	str	r3, [r7, #24]
  return result;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	609a      	str	r2, [r3, #8]
}
 800411a:	bf00      	nop
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_GPIO_SetPinPull>:
{
 8004126:	b480      	push	{r7}
 8004128:	b089      	sub	sp, #36	; 0x24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	613b      	str	r3, [r7, #16]
  return result;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	b2db      	uxtb	r3, r3
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	2103      	movs	r1, #3
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	401a      	ands	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	61bb      	str	r3, [r7, #24]
  return result;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	431a      	orrs	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	60da      	str	r2, [r3, #12]
}
 8004178:	bf00      	nop
 800417a:	3724      	adds	r7, #36	; 0x24
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_GPIO_SetAFPin_0_7>:
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	613b      	str	r3, [r7, #16]
  return result;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	210f      	movs	r1, #15
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	401a      	ands	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	61bb      	str	r3, [r7, #24]
  return result;
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	3724      	adds	r7, #36	; 0x24
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_GPIO_SetAFPin_8_15>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	b089      	sub	sp, #36	; 0x24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	613b      	str	r3, [r7, #16]
  return result;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	210f      	movs	r1, #15
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	61bb      	str	r3, [r7, #24]
  return result;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	fab3 f383 	clz	r3, r3
 8004228:	b2db      	uxtb	r3, r3
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	fa01 f303 	lsl.w	r3, r1, r3
 8004232:	431a      	orrs	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004238:	bf00      	nop
 800423a:	3724      	adds	r7, #36	; 0x24
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	613b      	str	r3, [r7, #16]
  return result;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800426e:	e050      	b.n	8004312 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	2101      	movs	r1, #1
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d042      	beq.n	800430c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d003      	beq.n	8004296 <LL_GPIO_Init+0x52>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d10d      	bne.n	80042b2 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	461a      	mov	r2, r3
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ff12 	bl	80040c8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	461a      	mov	r2, r3
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fef3 	bl	8004098 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	461a      	mov	r2, r3
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff33 	bl	8004126 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d11a      	bne.n	80042fe <LL_GPIO_Init+0xba>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	60bb      	str	r3, [r7, #8]
  return result;
 80042d4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d807      	bhi.n	80042f0 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	461a      	mov	r2, r3
 80042e6:	69b9      	ldr	r1, [r7, #24]
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff4b 	bl	8004184 <LL_GPIO_SetAFPin_0_7>
 80042ee:	e006      	b.n	80042fe <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	461a      	mov	r2, r3
 80042f6:	69b9      	ldr	r1, [r7, #24]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff72 	bl	80041e2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	461a      	mov	r2, r3
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fe97 	bl	800403a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	3301      	adds	r3, #1
 8004310:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1a7      	bne.n	8004270 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800432a:	b084      	sub	sp, #16
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	f107 001c 	add.w	r0, r7, #28
 8004338:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2b01      	cmp	r3, #1
 8004340:	d122      	bne.n	8004388 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800436a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d105      	bne.n	800437c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f99f 	bl	80046c0 <USB_CoreReset>
 8004382:	4603      	mov	r3, r0
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	e01a      	b.n	80043be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f993 	bl	80046c0 <USB_CoreReset>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800439e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
 80043b0:	e005      	b.n	80043be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d10b      	bne.n	80043dc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f043 0206 	orr.w	r2, r3, #6
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e8:	b004      	add	sp, #16
 80043ea:	4770      	bx	lr

080043ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d115      	bne.n	800447e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800445e:	2001      	movs	r0, #1
 8004460:	f7fc fd8a 	bl	8000f78 <HAL_Delay>
      ms++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f919 	bl	80046a2 <USB_GetMode>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d01e      	beq.n	80044b4 <USB_SetCurrentMode+0x84>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b31      	cmp	r3, #49	; 0x31
 800447a:	d9f0      	bls.n	800445e <USB_SetCurrentMode+0x2e>
 800447c:	e01a      	b.n	80044b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d115      	bne.n	80044b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004490:	2001      	movs	r0, #1
 8004492:	f7fc fd71 	bl	8000f78 <HAL_Delay>
      ms++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f900 	bl	80046a2 <USB_GetMode>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <USB_SetCurrentMode+0x84>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b31      	cmp	r3, #49	; 0x31
 80044ac:	d9f0      	bls.n	8004490 <USB_SetCurrentMode+0x60>
 80044ae:	e001      	b.n	80044b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e005      	b.n	80044c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b32      	cmp	r3, #50	; 0x32
 80044b8:	d101      	bne.n	80044be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	019b      	lsls	r3, r3, #6
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <USB_FlushTxFifo+0x44>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e006      	b.n	8004500 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d0f1      	beq.n	80044e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	00030d40 	.word	0x00030d40

08004510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2210      	movs	r2, #16
 8004520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3301      	adds	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <USB_FlushRxFifo+0x3c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e006      	b.n	8004540 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d0f1      	beq.n	8004522 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	00030d40 	.word	0x00030d40

08004550 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4611      	mov	r1, r2
 800455c:	461a      	mov	r2, r3
 800455e:	460b      	mov	r3, r1
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	4613      	mov	r3, r2
 8004564:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800456e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d123      	bne.n	80045be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004576:	88bb      	ldrh	r3, [r7, #4]
 8004578:	3303      	adds	r3, #3
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e018      	b.n	80045b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	031a      	lsls	r2, r3, #12
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4413      	add	r3, r2
 800458c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004590:	461a      	mov	r2, r3
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	3301      	adds	r3, #1
 800459c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3301      	adds	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	3301      	adds	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3301      	adds	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3e2      	bcc.n	8004584 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3724      	adds	r7, #36	; 0x24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b08b      	sub	sp, #44	; 0x2c
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	4613      	mov	r3, r2
 80045d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	e014      	b.n	8004622 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	601a      	str	r2, [r3, #0]
    pDest++;
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	3301      	adds	r3, #1
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	3301      	adds	r3, #1
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	3301      	adds	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	3301      	adds	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	3301      	adds	r3, #1
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3e6      	bcc.n	80045f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800462a:	8bfb      	ldrh	r3, [r7, #30]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01e      	beq.n	800466e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463a:	461a      	mov	r2, r3
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	b2da      	uxtb	r2, r3
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	701a      	strb	r2, [r3, #0]
      i++;
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	3301      	adds	r3, #1
 800465a:	623b      	str	r3, [r7, #32]
      pDest++;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	3301      	adds	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004662:	8bfb      	ldrh	r3, [r7, #30]
 8004664:	3b01      	subs	r3, #1
 8004666:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004668:	8bfb      	ldrh	r3, [r7, #30]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ea      	bne.n	8004644 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004670:	4618      	mov	r0, r3
 8004672:	372c      	adds	r7, #44	; 0x2c
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4013      	ands	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004694:	68fb      	ldr	r3, [r7, #12]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0301 	and.w	r3, r3, #1
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4a13      	ldr	r2, [pc, #76]	; (8004720 <USB_CoreReset+0x60>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e01a      	b.n	8004712 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	daf3      	bge.n	80046cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f043 0201 	orr.w	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4a09      	ldr	r2, [pc, #36]	; (8004720 <USB_CoreReset+0x60>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e006      	b.n	8004712 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d0f1      	beq.n	80046f4 <USB_CoreReset+0x34>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	00030d40 	.word	0x00030d40

08004724 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	f107 001c 	add.w	r0, r7, #28
 8004732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d018      	beq.n	80047a8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10a      	bne.n	8004792 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800478a:	f043 0304 	orr.w	r3, r3, #4
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	e014      	b.n	80047bc <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e009      	b.n	80047bc <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80047bc:	2110      	movs	r1, #16
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fe82 	bl	80044c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fea3 	bl	8004510 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e015      	b.n	80047fc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047dc:	461a      	mov	r2, r3
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3301      	adds	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	429a      	cmp	r2, r3
 8004802:	d3e5      	bcc.n	80047d0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <USB_HostInit+0x154>)
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a13      	ldr	r2, [pc, #76]	; (800487c <USB_HostInit+0x158>)
 8004830:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004834:	e009      	b.n	800484a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a10      	ldr	r2, [pc, #64]	; (8004880 <USB_HostInit+0x15c>)
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <USB_HostInit+0x160>)
 8004846:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f043 0210 	orr.w	r2, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <USB_HostInit+0x164>)
 8004862:	4313      	orrs	r3, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004874:	b004      	add	sp, #16
 8004876:	4770      	bx	lr
 8004878:	01000200 	.word	0x01000200
 800487c:	00e00300 	.word	0x00e00300
 8004880:	00600080 	.word	0x00600080
 8004884:	004000e0 	.word	0x004000e0
 8004888:	a3200008 	.word	0xa3200008

0800488c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048d4:	461a      	mov	r2, r3
 80048d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80048da:	6053      	str	r3, [r2, #4]
 80048dc:	e009      	b.n	80048f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d106      	bne.n	80048f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ea:	461a      	mov	r2, r3
 80048ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80048f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004920:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800492a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004930:	2064      	movs	r0, #100	; 0x64
 8004932:	f7fc fb21 	bl	8000f78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800493e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004942:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004944:	200a      	movs	r0, #10
 8004946:	f7fc fb17 	bl	8000f78 <HAL_Delay>

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004978:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <USB_DriveVbus+0x44>
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d106      	bne.n	8004998 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004992:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004996:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d109      	bne.n	80049b8 <USB_DriveVbus+0x64>
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0c5b      	lsrs	r3, r3, #17
 80049e4:	f003 0303 	and.w	r3, r3, #3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	b29b      	uxth	r3, r3
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
	...

08004a18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	70fb      	strb	r3, [r7, #3]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	70bb      	strb	r3, [r7, #2]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004a4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d87e      	bhi.n	8004b54 <USB_HC_Init+0x13c>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <USB_HC_Init+0x44>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a6d 	.word	0x08004a6d
 8004a60:	08004b17 	.word	0x08004b17
 8004a64:	08004a6d 	.word	0x08004a6d
 8004a68:	08004ad9 	.word	0x08004ad9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f240 439d 	movw	r3, #1181	; 0x49d
 8004a7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004a80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da10      	bge.n	8004aaa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004aa8:	e057      	b.n	8004b5a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d051      	beq.n	8004b5a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ad4:	60d3      	str	r3, [r2, #12]
      break;
 8004ad6:	e040      	b.n	8004b5a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	f240 639d 	movw	r3, #1693	; 0x69d
 8004aea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004aec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da34      	bge.n	8004b5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004b14:	e023      	b.n	8004b5e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	f240 2325 	movw	r3, #549	; 0x225
 8004b28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004b2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da17      	bge.n	8004b62 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b4c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004b50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004b52:	e006      	b.n	8004b62 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	77fb      	strb	r3, [r7, #31]
      break;
 8004b58:	e004      	b.n	8004b64 <USB_HC_Init+0x14c>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <USB_HC_Init+0x14c>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <USB_HC_Init+0x14c>
      break;
 8004b62:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	6939      	ldr	r1, [r7, #16]
 8004b7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004b8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da03      	bge.n	8004b9e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	e001      	b.n	8004ba2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff ff0f 	bl	80049c6 <USB_GetHostSpeed>
 8004ba8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d106      	bne.n	8004bc0 <USB_HC_Init+0x1a8>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d003      	beq.n	8004bc0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004bb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e001      	b.n	8004bc4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	059b      	lsls	r3, r3, #22
 8004bc8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004bcc:	78bb      	ldrb	r3, [r7, #2]
 8004bce:	02db      	lsls	r3, r3, #11
 8004bd0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bd4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bda:	049b      	lsls	r3, r3, #18
 8004bdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004be0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004be2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004be4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004be8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	0159      	lsls	r1, r3, #5
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c00:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004c02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	d10f      	bne.n	8004c2a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c28:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3720      	adds	r7, #32
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	785b      	ldrb	r3, [r3, #1]
 8004c4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c50:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d02d      	beq.n	8004cba <USB_HC_StartXfer+0x86>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	791b      	ldrb	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d129      	bne.n	8004cba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d117      	bne.n	8004c9c <USB_HC_StartXfer+0x68>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	79db      	ldrb	r3, [r3, #7]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <USB_HC_StartXfer+0x48>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	79db      	ldrb	r3, [r3, #7]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d10f      	bne.n	8004c9c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	6a3a      	ldr	r2, [r7, #32]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <USB_HC_StartXfer+0x86>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	795b      	ldrb	r3, [r3, #5]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fa2f 	bl	8005114 <USB_DoPing>
      return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e0f8      	b.n	8004eac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	8912      	ldrh	r2, [r2, #8]
 8004cca:	4413      	add	r3, r2
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	8912      	ldrh	r2, [r2, #8]
 8004cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cd6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004cd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004cda:	8b7b      	ldrh	r3, [r7, #26]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d90b      	bls.n	8004cf8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004ce0:	8b7b      	ldrh	r3, [r7, #26]
 8004ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	8912      	ldrh	r2, [r2, #8]
 8004cea:	fb02 f203 	mul.w	r2, r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	611a      	str	r2, [r3, #16]
 8004cf2:	e001      	b.n	8004cf8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	78db      	ldrb	r3, [r3, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004d00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	8912      	ldrh	r2, [r2, #8]
 8004d06:	fb02 f203 	mul.w	r2, r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	611a      	str	r2, [r3, #16]
 8004d0e:	e003      	b.n	8004d18 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d22:	04d9      	lsls	r1, r3, #19
 8004d24:	4b63      	ldr	r3, [pc, #396]	; (8004eb4 <USB_HC_StartXfer+0x280>)
 8004d26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	7a9b      	ldrb	r3, [r3, #10]
 8004d2e:	075b      	lsls	r3, r3, #29
 8004d30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d34:	69f9      	ldr	r1, [r7, #28]
 8004d36:	0148      	lsls	r0, r1, #5
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	4401      	add	r1, r0
 8004d3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004d42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	6a3a      	ldr	r2, [r7, #32]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	7e7b      	ldrb	r3, [r7, #25]
 8004da6:	075b      	lsls	r3, r3, #29
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	0148      	lsls	r0, r1, #5
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	4401      	add	r1, r0
 8004db0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	78db      	ldrb	r3, [r3, #3]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	e003      	b.n	8004dea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004de8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfe:	461a      	mov	r2, r3
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e04e      	b.n	8004eac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	78db      	ldrb	r3, [r3, #3]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d149      	bne.n	8004eaa <USB_HC_StartXfer+0x276>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d045      	beq.n	8004eaa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	79db      	ldrb	r3, [r3, #7]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d830      	bhi.n	8004e88 <USB_HC_StartXfer+0x254>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <USB_HC_StartXfer+0x1f8>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e61 	.word	0x08004e61
 8004e34:	08004e3d 	.word	0x08004e3d
 8004e38:	08004e61 	.word	0x08004e61
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	3303      	adds	r3, #3
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004e46:	8afa      	ldrh	r2, [r7, #22]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d91c      	bls.n	8004e8c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e5e:	e015      	b.n	8004e8c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	3303      	adds	r3, #3
 8004e66:	089b      	lsrs	r3, r3, #2
 8004e68:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004e6a:	8afa      	ldrh	r2, [r7, #22]
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d90a      	bls.n	8004e90 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	619a      	str	r2, [r3, #24]
        }
        break;
 8004e86:	e003      	b.n	8004e90 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004e88:	bf00      	nop
 8004e8a:	e002      	b.n	8004e92 <USB_HC_StartXfer+0x25e>
        break;
 8004e8c:	bf00      	nop
 8004e8e:	e000      	b.n	8004e92 <USB_HC_StartXfer+0x25e>
        break;
 8004e90:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68d9      	ldr	r1, [r3, #12]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	785a      	ldrb	r2, [r3, #1]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	9000      	str	r0, [sp, #0]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff fb53 	bl	8004550 <USB_WritePacket>
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3728      	adds	r7, #40	; 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	1ff80000 	.word	0x1ff80000

08004eb8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	b29b      	uxth	r3, r3
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b089      	sub	sp, #36	; 0x24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	0c9b      	lsrs	r3, r3, #18
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	0fdb      	lsrs	r3, r3, #31
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d104      	bne.n	8004f34 <USB_HC_Halt+0x5a>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e0e8      	b.n	8005106 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <USB_HC_Halt+0x66>
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d173      	bne.n	8005028 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 80cb 	bne.w	8005104 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d143      	bne.n	8005002 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f98:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fb8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fd8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe6:	d81d      	bhi.n	8005024 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ffe:	d0ec      	beq.n	8004fda <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005000:	e080      	b.n	8005104 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	440a      	add	r2, r1
 8005018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800501c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005020:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005022:	e06f      	b.n	8005104 <USB_HC_Halt+0x22a>
            break;
 8005024:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005026:	e06d      	b.n	8005104 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4413      	add	r3, r2
 8005030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	440a      	add	r2, r1
 800503e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005046:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d143      	bne.n	80050e0 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	440a      	add	r2, r1
 800506e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005076:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	440a      	add	r2, r1
 800508e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005096:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	3301      	adds	r3, #1
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050c4:	d81d      	bhi.n	8005102 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050dc:	d0ec      	beq.n	80050b8 <USB_HC_Halt+0x1de>
 80050de:	e011      	b.n	8005104 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e000      	b.n	8005104 <USB_HC_Halt+0x22a>
          break;
 8005102:	bf00      	nop
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3724      	adds	r7, #36	; 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005128:	2301      	movs	r3, #1
 800512a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	04da      	lsls	r2, r3, #19
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <USB_DoPing+0x74>)
 8005132:	4013      	ands	r3, r2
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	440a      	add	r2, r1
 800513c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005140:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005144:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800515c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005164:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	461a      	mov	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	1ff80000 	.word	0x1ff80000

0800518c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff f936 	bl	800440e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80051a2:	2110      	movs	r1, #16
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff f98f 	bl	80044c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff f9b0 	bl	8004510 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	e01f      	b.n	80051f6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051dc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	461a      	mov	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	3301      	adds	r3, #1
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b0f      	cmp	r3, #15
 80051fa:	d9dc      	bls.n	80051b6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e034      	b.n	800526c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005218:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005220:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005228:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	461a      	mov	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	3301      	adds	r3, #1
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005248:	d80c      	bhi.n	8005264 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005260:	d0ec      	beq.n	800523c <USB_StopHost+0xb0>
 8005262:	e000      	b.n	8005266 <USB_StopHost+0xda>
        break;
 8005264:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3301      	adds	r3, #1
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	d9c7      	bls.n	8005202 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 33ff 	mov.w	r3, #4294967295
 800527e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f04f 32ff 	mov.w	r2, #4294967295
 8005286:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff f8af 	bl	80043ec <USB_EnableGlobalInt>

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <LL_SetSystemCoreClock+0x1c>)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6013      	str	r3, [r2, #0]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000000 	.word	0x20000000

080052b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af04      	add	r7, sp, #16
 80052be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80052c0:	2301      	movs	r3, #1
 80052c2:	2202      	movs	r2, #2
 80052c4:	2102      	movs	r1, #2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fc66 	bl	8005b98 <USBH_FindInterface>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d002      	beq.n	80052dc <USBH_CDC_InterfaceInit+0x24>
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d901      	bls.n	80052e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80052dc:	2302      	movs	r3, #2
 80052de:	e13d      	b.n	800555c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fc3b 	bl	8005b60 <USBH_SelectInterface>
 80052ea:	4603      	mov	r3, r0
 80052ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80052f4:	2302      	movs	r3, #2
 80052f6:	e131      	b.n	800555c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80052fe:	2050      	movs	r0, #80	; 0x50
 8005300:	f002 fa00 	bl	8007704 <malloc>
 8005304:	4603      	mov	r3, r0
 8005306:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005318:	2302      	movs	r3, #2
 800531a:	e11f      	b.n	800555c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800531c:	2250      	movs	r2, #80	; 0x50
 800531e:	2100      	movs	r1, #0
 8005320:	68b8      	ldr	r0, [r7, #8]
 8005322:	f002 f9ff 	bl	8007724 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	211a      	movs	r1, #26
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	b25b      	sxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	da15      	bge.n	800536a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	211a      	movs	r1, #26
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	4413      	add	r3, r2
 800534a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	211a      	movs	r1, #26
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005364:	881a      	ldrh	r2, [r3, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	785b      	ldrb	r3, [r3, #1]
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 fe32 	bl	8006fda <USBH_AllocPipe>
 8005376:	4603      	mov	r3, r0
 8005378:	461a      	mov	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	7819      	ldrb	r1, [r3, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	7858      	ldrb	r0, [r3, #1]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	8952      	ldrh	r2, [r2, #10]
 8005396:	9202      	str	r2, [sp, #8]
 8005398:	2203      	movs	r2, #3
 800539a:	9201      	str	r2, [sp, #4]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4623      	mov	r3, r4
 80053a0:	4602      	mov	r2, r0
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 fdea 	bl	8006f7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2200      	movs	r2, #0
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f002 f8f9 	bl	80075a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80053b6:	2300      	movs	r3, #0
 80053b8:	2200      	movs	r2, #0
 80053ba:	210a      	movs	r1, #10
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fbeb 	bl	8005b98 <USBH_FindInterface>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2bff      	cmp	r3, #255	; 0xff
 80053ca:	d002      	beq.n	80053d2 <USBH_CDC_InterfaceInit+0x11a>
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d901      	bls.n	80053d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0c2      	b.n	800555c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	211a      	movs	r1, #26
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da16      	bge.n	800541c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	211a      	movs	r1, #26
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	4413      	add	r3, r2
 80053fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	211a      	movs	r1, #26
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	4413      	add	r3, r2
 8005410:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005414:	881a      	ldrh	r2, [r3, #0]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	835a      	strh	r2, [r3, #26]
 800541a:	e015      	b.n	8005448 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	211a      	movs	r1, #26
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800542c:	781a      	ldrb	r2, [r3, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	211a      	movs	r1, #26
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	4413      	add	r3, r2
 800543e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005442:	881a      	ldrh	r2, [r3, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	211a      	movs	r1, #26
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	4413      	add	r3, r2
 8005454:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	b25b      	sxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	da16      	bge.n	800548e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	211a      	movs	r1, #26
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	4413      	add	r3, r2
 800546c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	211a      	movs	r1, #26
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005486:	881a      	ldrh	r2, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	835a      	strh	r2, [r3, #26]
 800548c:	e015      	b.n	80054ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	211a      	movs	r1, #26
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800549e:	781a      	ldrb	r2, [r3, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	211a      	movs	r1, #26
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80054b4:	881a      	ldrh	r2, [r3, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	7b9b      	ldrb	r3, [r3, #14]
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 fd8a 	bl	8006fda <USBH_AllocPipe>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	7bdb      	ldrb	r3, [r3, #15]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fd80 	bl	8006fda <USBH_AllocPipe>
 80054da:	4603      	mov	r3, r0
 80054dc:	461a      	mov	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	7b59      	ldrb	r1, [r3, #13]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	7b98      	ldrb	r0, [r3, #14]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	8b12      	ldrh	r2, [r2, #24]
 80054fa:	9202      	str	r2, [sp, #8]
 80054fc:	2202      	movs	r2, #2
 80054fe:	9201      	str	r2, [sp, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4623      	mov	r3, r4
 8005504:	4602      	mov	r2, r0
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 fd38 	bl	8006f7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	7b19      	ldrb	r1, [r3, #12]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	7bd8      	ldrb	r0, [r3, #15]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	8b52      	ldrh	r2, [r2, #26]
 8005524:	9202      	str	r2, [sp, #8]
 8005526:	2202      	movs	r2, #2
 8005528:	9201      	str	r2, [sp, #4]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4623      	mov	r3, r4
 800552e:	4602      	mov	r2, r0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 fd23 	bl	8006f7c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	7b5b      	ldrb	r3, [r3, #13]
 8005542:	2200      	movs	r2, #0
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f002 f82e 	bl	80075a8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	7b1b      	ldrb	r3, [r3, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f002 f827 	bl	80075a8 <USBH_LL_SetToggle>

  return USBH_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	bd90      	pop	{r4, r7, pc}

08005564 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00e      	beq.n	800559c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fd18 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fd43 	bl	800701c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	7b1b      	ldrb	r3, [r3, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00e      	beq.n	80055c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	7b1b      	ldrb	r3, [r3, #12]
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 fd05 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	7b1b      	ldrb	r3, [r3, #12]
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f001 fd30 	bl	800701c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	7b5b      	ldrb	r3, [r3, #13]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00e      	beq.n	80055e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	7b5b      	ldrb	r3, [r3, #13]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 fcf2 	bl	8006fba <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	7b5b      	ldrb	r3, [r3, #13]
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fd1d 	bl	800701c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f002 f889 	bl	8007714 <free>
    phost->pActiveClass->pData = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005608:	2200      	movs	r2, #0
 800560a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3340      	adds	r3, #64	; 0x40
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8b1 	bl	8005796 <GetLineCoding>
 8005634:	4603      	mov	r3, r0
 8005636:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005638:	7afb      	ldrb	r3, [r7, #11]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005644:	2102      	movs	r1, #2
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800564a:	7afb      	ldrb	r3, [r7, #11]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005674:	2b04      	cmp	r3, #4
 8005676:	d877      	bhi.n	8005768 <USBH_CDC_Process+0x114>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <USBH_CDC_Process+0x2c>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005695 	.word	0x08005695
 8005684:	0800569b 	.word	0x0800569b
 8005688:	080056cb 	.word	0x080056cb
 800568c:	0800573f 	.word	0x0800573f
 8005690:	0800574d 	.word	0x0800574d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
      break;
 8005698:	e06d      	b.n	8005776 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f897 	bl	80057d4 <SetLineCoding>
 80056a6:	4603      	mov	r3, r0
 80056a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80056b8:	e058      	b.n	800576c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80056ba:	7bbb      	ldrb	r3, [r7, #14]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d055      	beq.n	800576c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2204      	movs	r2, #4
 80056c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80056c8:	e050      	b.n	800576c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	3340      	adds	r3, #64	; 0x40
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f860 	bl	8005796 <GetLineCoding>
 80056d6:	4603      	mov	r3, r0
 80056d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d126      	bne.n	800572e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f2:	791b      	ldrb	r3, [r3, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d13b      	bne.n	8005770 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005702:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005704:	429a      	cmp	r2, r3
 8005706:	d133      	bne.n	8005770 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005712:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005714:	429a      	cmp	r2, r3
 8005716:	d12b      	bne.n	8005770 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005720:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005722:	429a      	cmp	r2, r3
 8005724:	d124      	bne.n	8005770 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f958 	bl	80059dc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800572c:	e020      	b.n	8005770 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d01d      	beq.n	8005770 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2204      	movs	r2, #4
 8005738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800573c:	e018      	b.n	8005770 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f867 	bl	8005812 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8da 	bl	80058fe <CDC_ProcessReception>
      break;
 800574a:	e014      	b.n	8005776 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800574c:	2100      	movs	r1, #0
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 ffe3 	bl	800671a <USBH_ClrFeature>
 8005754:	4603      	mov	r3, r0
 8005756:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005758:	7bbb      	ldrb	r3, [r7, #14]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005766:	e005      	b.n	8005774 <USBH_CDC_Process+0x120>

    default:
      break;
 8005768:	bf00      	nop
 800576a:	e004      	b.n	8005776 <USBH_CDC_Process+0x122>
      break;
 800576c:	bf00      	nop
 800576e:	e002      	b.n	8005776 <USBH_CDC_Process+0x122>
      break;
 8005770:	bf00      	nop
 8005772:	e000      	b.n	8005776 <USBH_CDC_Process+0x122>
      break;
 8005774:	bf00      	nop

  }

  return status;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	22a1      	movs	r2, #161	; 0xa1
 80057a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2221      	movs	r2, #33	; 0x21
 80057aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2207      	movs	r2, #7
 80057bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2207      	movs	r2, #7
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 f988 	bl	8006ada <USBH_CtlReq>
 80057ca:	4603      	mov	r3, r0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2221      	movs	r2, #33	; 0x21
 80057e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2207      	movs	r2, #7
 80057fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2207      	movs	r2, #7
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 f969 	bl	8006ada <USBH_CtlReq>
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af02      	add	r7, sp, #8
 8005818:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005824:	2300      	movs	r3, #0
 8005826:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800582e:	2b01      	cmp	r3, #1
 8005830:	d002      	beq.n	8005838 <CDC_ProcessTransmission+0x26>
 8005832:	2b02      	cmp	r3, #2
 8005834:	d023      	beq.n	800587e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005836:	e05e      	b.n	80058f6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	8b12      	ldrh	r2, [r2, #24]
 8005840:	4293      	cmp	r3, r2
 8005842:	d90b      	bls.n	800585c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	69d9      	ldr	r1, [r3, #28]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8b1a      	ldrh	r2, [r3, #24]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	7b5b      	ldrb	r3, [r3, #13]
 8005850:	2001      	movs	r0, #1
 8005852:	9000      	str	r0, [sp, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fb4e 	bl	8006ef6 <USBH_BulkSendData>
 800585a:	e00b      	b.n	8005874 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	7b5b      	ldrb	r3, [r3, #13]
 800586a:	2001      	movs	r0, #1
 800586c:	9000      	str	r0, [sp, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fb41 	bl	8006ef6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800587c:	e03b      	b.n	80058f6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	7b5b      	ldrb	r3, [r3, #13]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fe65 	bl	8007554 <USBH_LL_GetURBState>
 800588a:	4603      	mov	r3, r0
 800588c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800588e:	7afb      	ldrb	r3, [r7, #11]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d128      	bne.n	80058e6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	8b12      	ldrh	r2, [r2, #24]
 800589c:	4293      	cmp	r3, r2
 800589e:	d90e      	bls.n	80058be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	8b12      	ldrh	r2, [r2, #24]
 80058a8:	1a9a      	subs	r2, r3, r2
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	8b12      	ldrh	r2, [r2, #24]
 80058b6:	441a      	add	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	61da      	str	r2, [r3, #28]
 80058bc:	e002      	b.n	80058c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d004      	beq.n	80058d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80058d4:	e00e      	b.n	80058f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f868 	bl	80059b4 <USBH_CDC_TransmitCallback>
      break;
 80058e4:	e006      	b.n	80058f4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80058e6:	7afb      	ldrb	r3, [r7, #11]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d103      	bne.n	80058f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80058f4:	bf00      	nop
  }
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005910:	2300      	movs	r3, #0
 8005912:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800591a:	2b03      	cmp	r3, #3
 800591c:	d002      	beq.n	8005924 <CDC_ProcessReception+0x26>
 800591e:	2b04      	cmp	r3, #4
 8005920:	d00e      	beq.n	8005940 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005922:	e043      	b.n	80059ac <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6a19      	ldr	r1, [r3, #32]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	8b5a      	ldrh	r2, [r3, #26]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fb05 	bl	8006f40 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2204      	movs	r2, #4
 800593a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800593e:	e035      	b.n	80059ac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	7b1b      	ldrb	r3, [r3, #12]
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f001 fe04 	bl	8007554 <USBH_LL_GetURBState>
 800594c:	4603      	mov	r3, r0
 800594e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d129      	bne.n	80059aa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	7b1b      	ldrb	r3, [r3, #12]
 800595a:	4619      	mov	r1, r3
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 fd67 	bl	8007430 <USBH_LL_GetLastXferSize>
 8005962:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	429a      	cmp	r2, r3
 800596c:	d016      	beq.n	800599c <CDC_ProcessReception+0x9e>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	8b5b      	ldrh	r3, [r3, #26]
 8005972:	461a      	mov	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4293      	cmp	r3, r2
 8005978:	d910      	bls.n	800599c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6a1a      	ldr	r2, [r3, #32]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	441a      	add	r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800599a:	e006      	b.n	80059aa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f80f 	bl	80059c8 <USBH_CDC_ReceiveCallback>
      break;
 80059aa:	bf00      	nop
  }
}
 80059ac:	bf00      	nop
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a04:	2302      	movs	r3, #2
 8005a06:	e029      	b.n	8005a5c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	79fa      	ldrb	r2, [r7, #7]
 8005a0c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f81f 	bl	8005a64 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f001 fc37 	bl	80072c8 <USBH_LL_Init>

  return USBH_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e009      	b.n	8005a8a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	33e0      	adds	r3, #224	; 0xe0
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	2200      	movs	r2, #0
 8005a82:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b0e      	cmp	r3, #14
 8005a8e:	d9f2      	bls.n	8005a76 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e009      	b.n	8005aaa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab0:	d3f1      	bcc.n	8005a96 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2240      	movs	r2, #64	; 0x40
 8005ad6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d016      	beq.n	8005b4e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10e      	bne.n	8005b48 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	33de      	adds	r3, #222	; 0xde
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e004      	b.n	8005b52 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e001      	b.n	8005b52 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005b76:	78fa      	ldrb	r2, [r7, #3]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d204      	bcs.n	8005b86 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005b84:	e001      	b.n	8005b8a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005b86:	2302      	movs	r3, #2
 8005b88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	70fb      	strb	r3, [r7, #3]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70bb      	strb	r3, [r7, #2]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005bc0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005bc2:	e025      	b.n	8005c10 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	221a      	movs	r2, #26
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	3308      	adds	r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	795b      	ldrb	r3, [r3, #5]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d002      	beq.n	8005be6 <USBH_FindInterface+0x4e>
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	2bff      	cmp	r3, #255	; 0xff
 8005be4:	d111      	bne.n	8005c0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005bea:	78ba      	ldrb	r2, [r7, #2]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d002      	beq.n	8005bf6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005bf0:	78bb      	ldrb	r3, [r7, #2]
 8005bf2:	2bff      	cmp	r3, #255	; 0xff
 8005bf4:	d109      	bne.n	8005c0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005bfa:	787a      	ldrb	r2, [r7, #1]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d002      	beq.n	8005c06 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c00:	787b      	ldrb	r3, [r7, #1]
 8005c02:	2bff      	cmp	r3, #255	; 0xff
 8005c04:	d101      	bne.n	8005c0a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	e006      	b.n	8005c18 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d9d6      	bls.n	8005bc4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005c16:	23ff      	movs	r3, #255	; 0xff
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 fb87 	bl	8007340 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005c32:	2101      	movs	r1, #1
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fca0 	bl	800757a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af04      	add	r7, sp, #16
 8005c4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d102      	bne.n	8005c66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2203      	movs	r2, #3
 8005c64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b0b      	cmp	r3, #11
 8005c6e:	f200 81b3 	bhi.w	8005fd8 <USBH_Process+0x394>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <USBH_Process+0x34>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005cdb 	.word	0x08005cdb
 8005c80:	08005d43 	.word	0x08005d43
 8005c84:	08005f73 	.word	0x08005f73
 8005c88:	08005fd9 	.word	0x08005fd9
 8005c8c:	08005de7 	.word	0x08005de7
 8005c90:	08005f19 	.word	0x08005f19
 8005c94:	08005e1d 	.word	0x08005e1d
 8005c98:	08005e3d 	.word	0x08005e3d
 8005c9c:	08005e5d 	.word	0x08005e5d
 8005ca0:	08005e8b 	.word	0x08005e8b
 8005ca4:	08005f5b 	.word	0x08005f5b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8193 	beq.w	8005fdc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005cbc:	20c8      	movs	r0, #200	; 0xc8
 8005cbe:	f001 fca3 	bl	8007608 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 fb99 	bl	80073fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005cd8:	e180      	b.n	8005fdc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d107      	bne.n	8005cf4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005cf2:	e182      	b.n	8005ffa <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cfe:	d914      	bls.n	8005d2a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d06:	3301      	adds	r3, #1
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d903      	bls.n	8005d22 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	220d      	movs	r2, #13
 8005d1e:	701a      	strb	r2, [r3, #0]
      break;
 8005d20:	e16b      	b.n	8005ffa <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
      break;
 8005d28:	e167      	b.n	8005ffa <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d30:	f103 020a 	add.w	r2, r3, #10
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005d3a:	200a      	movs	r0, #10
 8005d3c:	f001 fc64 	bl	8007608 <USBH_Delay>
      break;
 8005d40:	e15b      	b.n	8005ffa <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d52:	2104      	movs	r1, #4
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005d58:	2064      	movs	r0, #100	; 0x64
 8005d5a:	f001 fc55 	bl	8007608 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fb24 	bl	80073ac <USBH_LL_GetSpeed>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2205      	movs	r2, #5
 8005d72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005d74:	2100      	movs	r1, #0
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 f92f 	bl	8006fda <USBH_AllocPipe>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005d84:	2180      	movs	r1, #128	; 0x80
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 f927 	bl	8006fda <USBH_AllocPipe>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7919      	ldrb	r1, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005da8:	b292      	uxth	r2, r2
 8005daa:	9202      	str	r2, [sp, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	9201      	str	r2, [sp, #4]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	4603      	mov	r3, r0
 8005db4:	2280      	movs	r2, #128	; 0x80
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 f8e0 	bl	8006f7c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7959      	ldrb	r1, [r3, #5]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005dd0:	b292      	uxth	r2, r2
 8005dd2:	9202      	str	r2, [sp, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	9201      	str	r2, [sp, #4]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2200      	movs	r2, #0
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 f8cc 	bl	8006f7c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005de4:	e109      	b.n	8005ffa <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f90c 	bl	8006004 <USBH_HandleEnum>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 80f3 	bne.w	8005fe0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d103      	bne.n	8005e14 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2208      	movs	r2, #8
 8005e10:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005e12:	e0e5      	b.n	8005fe0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2207      	movs	r2, #7
 8005e18:	701a      	strb	r2, [r3, #0]
      break;
 8005e1a:	e0e1      	b.n	8005fe0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80de 	beq.w	8005fe4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2208      	movs	r2, #8
 8005e38:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005e3a:	e0d3      	b.n	8005fe4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fc20 	bl	800668c <USBH_SetCfg>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 80ca 	bne.w	8005fe8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2209      	movs	r2, #9
 8005e58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e5a:	e0c5      	b.n	8005fe8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc30 	bl	80066d2 <USBH_SetFeature>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f040 80b9 	bne.w	8005fec <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220a      	movs	r2, #10
 8005e7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005e80:	e0b4      	b.n	8005fec <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	220a      	movs	r2, #10
 8005e86:	701a      	strb	r2, [r3, #0]
      break;
 8005e88:	e0b0      	b.n	8005fec <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80ad 	beq.w	8005ff0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	e016      	b.n	8005ed2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005ea4:	7bfa      	ldrb	r2, [r7, #15]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	32de      	adds	r2, #222	; 0xde
 8005eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eae:	791a      	ldrb	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d108      	bne.n	8005ecc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005eba:	7bfa      	ldrb	r2, [r7, #15]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	32de      	adds	r2, #222	; 0xde
 8005ec0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005eca:	e005      	b.n	8005ed8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0e5      	beq.n	8005ea4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d016      	beq.n	8005f10 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2206      	movs	r2, #6
 8005ef8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f00:	2103      	movs	r1, #3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f06:	e073      	b.n	8005ff0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	220d      	movs	r2, #13
 8005f0c:	701a      	strb	r2, [r3, #0]
      break;
 8005f0e:	e06f      	b.n	8005ff0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	220d      	movs	r2, #13
 8005f14:	701a      	strb	r2, [r3, #0]
      break;
 8005f16:	e06b      	b.n	8005ff0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d017      	beq.n	8005f52 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	220b      	movs	r2, #11
 8005f3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f40:	e058      	b.n	8005ff4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d154      	bne.n	8005ff4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	220d      	movs	r2, #13
 8005f4e:	701a      	strb	r2, [r3, #0]
      break;
 8005f50:	e050      	b.n	8005ff4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	220d      	movs	r2, #13
 8005f56:	701a      	strb	r2, [r3, #0]
      break;
 8005f58:	e04c      	b.n	8005ff4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d049      	beq.n	8005ff8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
      }
      break;
 8005f70:	e042      	b.n	8005ff8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fd72 	bl	8005a64 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fae:	2105      	movs	r1, #5
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d107      	bne.n	8005fd0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff fe2b 	bl	8005c24 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fce:	e014      	b.n	8005ffa <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f9b5 	bl	8007340 <USBH_LL_Start>
      break;
 8005fd6:	e010      	b.n	8005ffa <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005fd8:	bf00      	nop
 8005fda:	e00e      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005fdc:	bf00      	nop
 8005fde:	e00c      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005fe0:	bf00      	nop
 8005fe2:	e00a      	b.n	8005ffa <USBH_Process+0x3b6>
    break;
 8005fe4:	bf00      	nop
 8005fe6:	e008      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005fe8:	bf00      	nop
 8005fea:	e006      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005fec:	bf00      	nop
 8005fee:	e004      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005ff0:	bf00      	nop
 8005ff2:	e002      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <USBH_Process+0x3b6>
      break;
 8005ff8:	bf00      	nop
  }
  return USBH_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af04      	add	r7, sp, #16
 800600a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006010:	2301      	movs	r3, #1
 8006012:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b07      	cmp	r3, #7
 800601a:	f200 81c1 	bhi.w	80063a0 <USBH_HandleEnum+0x39c>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <USBH_HandleEnum+0x20>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006045 	.word	0x08006045
 8006028:	08006103 	.word	0x08006103
 800602c:	0800616d 	.word	0x0800616d
 8006030:	080061fb 	.word	0x080061fb
 8006034:	08006265 	.word	0x08006265
 8006038:	080062d5 	.word	0x080062d5
 800603c:	0800631b 	.word	0x0800631b
 8006040:	08006361 	.word	0x08006361
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006044:	2108      	movs	r1, #8
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa50 	bl	80064ec <USBH_Get_DevDesc>
 800604c:	4603      	mov	r3, r0
 800604e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d130      	bne.n	80060b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7919      	ldrb	r1, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800607a:	b292      	uxth	r2, r2
 800607c:	9202      	str	r2, [sp, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	9201      	str	r2, [sp, #4]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4603      	mov	r3, r0
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 ff77 	bl	8006f7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7959      	ldrb	r1, [r3, #5]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80060a2:	b292      	uxth	r2, r2
 80060a4:	9202      	str	r2, [sp, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	2200      	movs	r2, #0
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 ff63 	bl	8006f7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80060b6:	e175      	b.n	80063a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060b8:	7bbb      	ldrb	r3, [r7, #14]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	f040 8172 	bne.w	80063a4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060c6:	3301      	adds	r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d903      	bls.n	80060e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	220d      	movs	r2, #13
 80060de:	701a      	strb	r2, [r3, #0]
      break;
 80060e0:	e160      	b.n	80063a4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	795b      	ldrb	r3, [r3, #5]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 ff97 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 ff91 	bl	800701c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
      break;
 8006100:	e150      	b.n	80063a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006102:	2112      	movs	r1, #18
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f9f1 	bl	80064ec <USBH_Get_DevDesc>
 800610a:	4603      	mov	r3, r0
 800610c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d103      	bne.n	800611c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800611a:	e145      	b.n	80063a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800611c:	7bbb      	ldrb	r3, [r7, #14]
 800611e:	2b03      	cmp	r3, #3
 8006120:	f040 8142 	bne.w	80063a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800612a:	3301      	adds	r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800613a:	2b03      	cmp	r3, #3
 800613c:	d903      	bls.n	8006146 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	220d      	movs	r2, #13
 8006142:	701a      	strb	r2, [r3, #0]
      break;
 8006144:	e130      	b.n	80063a8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	795b      	ldrb	r3, [r3, #5]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 ff65 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	791b      	ldrb	r3, [r3, #4]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 ff5f 	bl	800701c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e11d      	b.n	80063a8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800616c:	2101      	movs	r1, #1
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa68 	bl	8006644 <USBH_SetAddress>
 8006174:	4603      	mov	r3, r0
 8006176:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d132      	bne.n	80061e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800617e:	2002      	movs	r0, #2
 8006180:	f001 fa42 	bl	8007608 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2203      	movs	r2, #3
 8006190:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7919      	ldrb	r1, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80061a6:	b292      	uxth	r2, r2
 80061a8:	9202      	str	r2, [sp, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	9201      	str	r2, [sp, #4]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	4603      	mov	r3, r0
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fee1 	bl	8006f7c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7959      	ldrb	r1, [r3, #5]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061ce:	b292      	uxth	r2, r2
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	9201      	str	r2, [sp, #4]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	4603      	mov	r3, r0
 80061da:	2200      	movs	r2, #0
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fecd 	bl	8006f7c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80061e2:	e0e3      	b.n	80063ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	f040 80e0 	bne.w	80063ac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	220d      	movs	r2, #13
 80061f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	705a      	strb	r2, [r3, #1]
      break;
 80061f8:	e0d8      	b.n	80063ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80061fa:	2109      	movs	r1, #9
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f99d 	bl	800653c <USBH_Get_CfgDesc>
 8006202:	4603      	mov	r3, r0
 8006204:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2204      	movs	r2, #4
 8006210:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006212:	e0cd      	b.n	80063b0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b03      	cmp	r3, #3
 8006218:	f040 80ca 	bne.w	80063b0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006222:	3301      	adds	r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006232:	2b03      	cmp	r3, #3
 8006234:	d903      	bls.n	800623e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	220d      	movs	r2, #13
 800623a:	701a      	strb	r2, [r3, #0]
      break;
 800623c:	e0b8      	b.n	80063b0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	795b      	ldrb	r3, [r3, #5]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fee9 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fee3 	bl	800701c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
      break;
 8006262:	e0a5      	b.n	80063b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f965 	bl	800653c <USBH_Get_CfgDesc>
 8006272:	4603      	mov	r3, r0
 8006274:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006276:	7bbb      	ldrb	r3, [r7, #14]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2205      	movs	r2, #5
 8006280:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006282:	e097      	b.n	80063b4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	2b03      	cmp	r3, #3
 8006288:	f040 8094 	bne.w	80063b4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006292:	3301      	adds	r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d903      	bls.n	80062ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	220d      	movs	r2, #13
 80062aa:	701a      	strb	r2, [r3, #0]
      break;
 80062ac:	e082      	b.n	80063b4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	795b      	ldrb	r3, [r3, #5]
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 feb1 	bl	800701c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	791b      	ldrb	r3, [r3, #4]
 80062be:	4619      	mov	r1, r3
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 feab 	bl	800701c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
      break;
 80062d2:	e06f      	b.n	80063b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d019      	beq.n	8006312 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80062ea:	23ff      	movs	r3, #255	; 0xff
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f949 	bl	8006584 <USBH_Get_StringDesc>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2206      	movs	r2, #6
 8006300:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006302:	e059      	b.n	80063b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b03      	cmp	r3, #3
 8006308:	d156      	bne.n	80063b8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2206      	movs	r2, #6
 800630e:	705a      	strb	r2, [r3, #1]
      break;
 8006310:	e052      	b.n	80063b8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2206      	movs	r2, #6
 8006316:	705a      	strb	r2, [r3, #1]
      break;
 8006318:	e04e      	b.n	80063b8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006320:	2b00      	cmp	r3, #0
 8006322:	d019      	beq.n	8006358 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006330:	23ff      	movs	r3, #255	; 0xff
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f926 	bl	8006584 <USBH_Get_StringDesc>
 8006338:	4603      	mov	r3, r0
 800633a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d103      	bne.n	800634a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2207      	movs	r2, #7
 8006346:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006348:	e038      	b.n	80063bc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800634a:	7bbb      	ldrb	r3, [r7, #14]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d135      	bne.n	80063bc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2207      	movs	r2, #7
 8006354:	705a      	strb	r2, [r3, #1]
      break;
 8006356:	e031      	b.n	80063bc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2207      	movs	r2, #7
 800635c:	705a      	strb	r2, [r3, #1]
      break;
 800635e:	e02d      	b.n	80063bc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006366:	2b00      	cmp	r3, #0
 8006368:	d017      	beq.n	800639a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006376:	23ff      	movs	r3, #255	; 0xff
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f903 	bl	8006584 <USBH_Get_StringDesc>
 800637e:	4603      	mov	r3, r0
 8006380:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800638c:	e018      	b.n	80063c0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d115      	bne.n	80063c0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	73fb      	strb	r3, [r7, #15]
      break;
 8006398:	e012      	b.n	80063c0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
      break;
 800639e:	e00f      	b.n	80063c0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80063a0:	bf00      	nop
 80063a2:	e00e      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063a4:	bf00      	nop
 80063a6:	e00c      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063a8:	bf00      	nop
 80063aa:	e00a      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063ac:	bf00      	nop
 80063ae:	e008      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063b0:	bf00      	nop
 80063b2:	e006      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063b4:	bf00      	nop
 80063b6:	e004      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063b8:	bf00      	nop
 80063ba:	e002      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <USBH_HandleEnum+0x3be>
      break;
 80063c0:	bf00      	nop
  }
  return Status;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f804 	bl	800640e <USBH_HandleSof>
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b0b      	cmp	r3, #11
 800641e:	d10a      	bne.n	8006436 <USBH_HandleSof+0x28>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
  }
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800644e:	bf00      	nop
}
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800646a:	bf00      	nop
}
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 ff56 	bl	8007376 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	791b      	ldrb	r3, [r3, #4]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fda3 	bl	800701c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	795b      	ldrb	r3, [r3, #5]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fd9d 	bl	800701c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	b29b      	uxth	r3, r3
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800650a:	2100      	movs	r1, #0
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f864 	bl	80065da <USBH_GetDescriptor>
 8006512:	4603      	mov	r3, r0
 8006514:	73fb      	strb	r3, [r7, #15]
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	b292      	uxth	r2, r2
 800652c:	4619      	mov	r1, r3
 800652e:	f000 f918 	bl	8006762 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af02      	add	r7, sp, #8
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	331c      	adds	r3, #28
 800654c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800654e:	887b      	ldrh	r3, [r7, #2]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006558:	2100      	movs	r1, #0
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f83d 	bl	80065da <USBH_GetDescriptor>
 8006560:	4603      	mov	r3, r0
 8006562:	72fb      	strb	r3, [r7, #11]
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006570:	887a      	ldrh	r2, [r7, #2]
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f964 	bl	8006842 <USBH_ParseCfgDesc>
  }

  return status;
 800657a:	7afb      	ldrb	r3, [r7, #11]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	461a      	mov	r2, r3
 8006590:	460b      	mov	r3, r1
 8006592:	72fb      	strb	r3, [r7, #11]
 8006594:	4613      	mov	r3, r2
 8006596:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065a0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80065a8:	893b      	ldrh	r3, [r7, #8]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	460b      	mov	r3, r1
 80065ae:	2100      	movs	r1, #0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f812 	bl	80065da <USBH_GetDescriptor>
 80065b6:	4603      	mov	r3, r0
 80065b8:	75fb      	strb	r3, [r7, #23]
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d107      	bne.n	80065d0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065c6:	893a      	ldrh	r2, [r7, #8]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa37 	bl	8006a3e <USBH_ParseStringDesc>
  }

  return status;
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	607b      	str	r3, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	72fb      	strb	r3, [r7, #11]
 80065e8:	4613      	mov	r3, r2
 80065ea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	789b      	ldrb	r3, [r3, #2]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d11c      	bne.n	800662e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2206      	movs	r2, #6
 8006604:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	893a      	ldrh	r2, [r7, #8]
 800660a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006616:	d104      	bne.n	8006622 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f240 4209 	movw	r2, #1033	; 0x409
 800661e:	829a      	strh	r2, [r3, #20]
 8006620:	e002      	b.n	8006628 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8b3a      	ldrh	r2, [r7, #24]
 800662c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800662e:	8b3b      	ldrh	r3, [r7, #24]
 8006630:	461a      	mov	r2, r3
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 fa50 	bl	8006ada <USBH_CtlReq>
 800663a:	4603      	mov	r3, r0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	789b      	ldrb	r3, [r3, #2]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d10f      	bne.n	8006678 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2205      	movs	r2, #5
 8006662:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b29a      	uxth	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa2c 	bl	8006ada <USBH_CtlReq>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	789b      	ldrb	r3, [r3, #2]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d10e      	bne.n	80066be <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2209      	movs	r2, #9
 80066aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa09 	bl	8006ada <USBH_CtlReq>
 80066c8:	4603      	mov	r3, r0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b082      	sub	sp, #8
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	789b      	ldrb	r3, [r3, #2]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d10f      	bne.n	8006706 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2203      	movs	r2, #3
 80066f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006706:	2200      	movs	r2, #0
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9e5 	bl	8006ada <USBH_CtlReq>
 8006710:	4603      	mov	r3, r0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	460b      	mov	r3, r1
 8006724:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d10f      	bne.n	800674e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800674e:	2200      	movs	r2, #0
 8006750:	2100      	movs	r1, #0
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9c1 	bl	8006ada <USBH_CtlReq>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	4613      	mov	r3, r2
 800676e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	785a      	ldrb	r2, [r3, #1]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	3302      	adds	r3, #2
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b29a      	uxth	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	3303      	adds	r3, #3
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	b29b      	uxth	r3, r3
 8006794:	4313      	orrs	r3, r2
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	791a      	ldrb	r2, [r3, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	795a      	ldrb	r2, [r3, #5]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	799a      	ldrb	r2, [r3, #6]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	79da      	ldrb	r2, [r3, #7]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d939      	bls.n	8006836 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3308      	adds	r3, #8
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	3309      	adds	r3, #9
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	330a      	adds	r3, #10
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	330b      	adds	r3, #11
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	4313      	orrs	r3, r2
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	330c      	adds	r3, #12
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b29a      	uxth	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	330d      	adds	r3, #13
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	b29b      	uxth	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	7b9a      	ldrb	r2, [r3, #14]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	7bda      	ldrb	r2, [r3, #15]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	7c1a      	ldrb	r2, [r3, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7c5a      	ldrb	r2, [r3, #17]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	745a      	strb	r2, [r3, #17]
  }
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b08a      	sub	sp, #40	; 0x28
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	4613      	mov	r3, r2
 800684e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	785a      	ldrb	r2, [r3, #1]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	3302      	adds	r3, #2
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b29a      	uxth	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	3303      	adds	r3, #3
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	b29b      	uxth	r3, r3
 8006888:	4313      	orrs	r3, r2
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	791a      	ldrb	r2, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	795a      	ldrb	r2, [r3, #5]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	799a      	ldrb	r2, [r3, #6]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	79da      	ldrb	r2, [r3, #7]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	7a1a      	ldrb	r2, [r3, #8]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	2b09      	cmp	r3, #9
 80068bc:	d95f      	bls.n	800697e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80068be:	2309      	movs	r3, #9
 80068c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80068c6:	e051      	b.n	800696c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80068c8:	f107 0316 	add.w	r3, r7, #22
 80068cc:	4619      	mov	r1, r3
 80068ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068d0:	f000 f8e8 	bl	8006aa4 <USBH_GetNextDesc>
 80068d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d146      	bne.n	800696c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80068de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068e2:	221a      	movs	r2, #26
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	3308      	adds	r3, #8
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	3302      	adds	r3, #2
 80068f0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80068f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068f4:	69f8      	ldr	r0, [r7, #28]
 80068f6:	f000 f846 	bl	8006986 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006904:	e022      	b.n	800694c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006906:	f107 0316 	add.w	r3, r7, #22
 800690a:	4619      	mov	r1, r3
 800690c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800690e:	f000 f8c9 	bl	8006aa4 <USBH_GetNextDesc>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	785b      	ldrb	r3, [r3, #1]
 8006918:	2b05      	cmp	r3, #5
 800691a:	d117      	bne.n	800694c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800691c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006920:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006924:	3201      	adds	r2, #1
 8006926:	00d2      	lsls	r2, r2, #3
 8006928:	211a      	movs	r1, #26
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	4413      	add	r3, r2
 8006930:	3308      	adds	r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	3304      	adds	r3, #4
 8006938:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800693a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800693c:	69b8      	ldr	r0, [r7, #24]
 800693e:	f000 f851 	bl	80069e4 <USBH_ParseEPDesc>
            ep_ix++;
 8006942:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006946:	3301      	adds	r3, #1
 8006948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	791b      	ldrb	r3, [r3, #4]
 8006950:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006954:	429a      	cmp	r2, r3
 8006956:	d204      	bcs.n	8006962 <USBH_ParseCfgDesc+0x120>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	885a      	ldrh	r2, [r3, #2]
 800695c:	8afb      	ldrh	r3, [r7, #22]
 800695e:	429a      	cmp	r2, r3
 8006960:	d8d1      	bhi.n	8006906 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006966:	3301      	adds	r3, #1
 8006968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800696c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006970:	2b01      	cmp	r3, #1
 8006972:	d804      	bhi.n	800697e <USBH_ParseCfgDesc+0x13c>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	885a      	ldrh	r2, [r3, #2]
 8006978:	8afb      	ldrh	r3, [r7, #22]
 800697a:	429a      	cmp	r2, r3
 800697c:	d8a4      	bhi.n	80068c8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800697e:	bf00      	nop
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	785a      	ldrb	r2, [r3, #1]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	789a      	ldrb	r2, [r3, #2]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	78da      	ldrb	r2, [r3, #3]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	791a      	ldrb	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	795a      	ldrb	r2, [r3, #5]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	799a      	ldrb	r2, [r3, #6]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	79da      	ldrb	r2, [r3, #7]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	7a1a      	ldrb	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	721a      	strb	r2, [r3, #8]
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	785a      	ldrb	r2, [r3, #1]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	789a      	ldrb	r2, [r3, #2]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	78da      	ldrb	r2, [r3, #3]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	3304      	adds	r3, #4
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	3305      	adds	r3, #5
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	4313      	orrs	r3, r2
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	799a      	ldrb	r2, [r3, #6]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	719a      	strb	r2, [r3, #6]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d120      	bne.n	8006a98 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	1e9a      	subs	r2, r3, #2
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bf28      	it	cs
 8006a62:	4613      	movcs	r3, r2
 8006a64:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	82fb      	strh	r3, [r7, #22]
 8006a70:	e00b      	b.n	8006a8a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006a72:	8afb      	ldrh	r3, [r7, #22]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	781a      	ldrb	r2, [r3, #0]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006a84:	8afb      	ldrh	r3, [r7, #22]
 8006a86:	3302      	adds	r3, #2
 8006a88:	82fb      	strh	r3, [r7, #22]
 8006a8a:	8afa      	ldrh	r2, [r7, #22]
 8006a8c:	8abb      	ldrh	r3, [r7, #20]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d3ef      	bcc.n	8006a72 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
  }
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	4413      	add	r3, r2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006acc:	68fb      	ldr	r3, [r7, #12]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b086      	sub	sp, #24
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	789b      	ldrb	r3, [r3, #2]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d002      	beq.n	8006afa <USBH_CtlReq+0x20>
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d00f      	beq.n	8006b18 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006af8:	e027      	b.n	8006b4a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	88fa      	ldrh	r2, [r7, #6]
 8006b04:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
      break;
 8006b16:	e018      	b.n	8006b4a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f81b 	bl	8006b54 <USBH_HandleControl>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <USBH_CtlReq+0x54>
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d106      	bne.n	8006b3c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	761a      	strb	r2, [r3, #24]
      break;
 8006b3a:	e005      	b.n	8006b48 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d102      	bne.n	8006b48 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	709a      	strb	r2, [r3, #2]
      break;
 8006b48:	bf00      	nop
  }
  return status;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	7e1b      	ldrb	r3, [r3, #24]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	2b0a      	cmp	r3, #10
 8006b6c:	f200 8156 	bhi.w	8006e1c <USBH_HandleControl+0x2c8>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <USBH_HandleControl+0x24>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	08006bbf 	.word	0x08006bbf
 8006b80:	08006c29 	.word	0x08006c29
 8006b84:	08006c4f 	.word	0x08006c4f
 8006b88:	08006c87 	.word	0x08006c87
 8006b8c:	08006cb1 	.word	0x08006cb1
 8006b90:	08006d03 	.word	0x08006d03
 8006b94:	08006d25 	.word	0x08006d25
 8006b98:	08006d61 	.word	0x08006d61
 8006b9c:	08006d87 	.word	0x08006d87
 8006ba0:	08006dc5 	.word	0x08006dc5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f103 0110 	add.w	r1, r3, #16
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	795b      	ldrb	r3, [r3, #5]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f943 	bl	8006e3c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	761a      	strb	r2, [r3, #24]
      break;
 8006bbc:	e139      	b.n	8006e32 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	795b      	ldrb	r3, [r3, #5]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fcc5 	bl	8007554 <USBH_LL_GetURBState>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d11e      	bne.n	8006c12 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	7c1b      	ldrb	r3, [r3, #16]
 8006bd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bdc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8adb      	ldrh	r3, [r3, #22]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006be6:	7b7b      	ldrb	r3, [r7, #13]
 8006be8:	2b80      	cmp	r3, #128	; 0x80
 8006bea:	d103      	bne.n	8006bf4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006bf2:	e115      	b.n	8006e20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	761a      	strb	r2, [r3, #24]
      break;
 8006bfa:	e111      	b.n	8006e20 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006bfc:	7b7b      	ldrb	r3, [r7, #13]
 8006bfe:	2b80      	cmp	r3, #128	; 0x80
 8006c00:	d103      	bne.n	8006c0a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2209      	movs	r2, #9
 8006c06:	761a      	strb	r2, [r3, #24]
      break;
 8006c08:	e10a      	b.n	8006e20 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2207      	movs	r2, #7
 8006c0e:	761a      	strb	r2, [r3, #24]
      break;
 8006c10:	e106      	b.n	8006e20 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d003      	beq.n	8006c20 <USBH_HandleControl+0xcc>
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	f040 8100 	bne.w	8006e20 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	220b      	movs	r2, #11
 8006c24:	761a      	strb	r2, [r3, #24]
      break;
 8006c26:	e0fb      	b.n	8006e20 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6899      	ldr	r1, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	899a      	ldrh	r2, [r3, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	791b      	ldrb	r3, [r3, #4]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f93a 	bl	8006eba <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2204      	movs	r2, #4
 8006c4a:	761a      	strb	r2, [r3, #24]
      break;
 8006c4c:	e0f1      	b.n	8006e32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	791b      	ldrb	r3, [r3, #4]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fc7d 	bl	8007554 <USBH_LL_GetURBState>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c5e:	7bbb      	ldrb	r3, [r7, #14]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d102      	bne.n	8006c6a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2209      	movs	r2, #9
 8006c68:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b05      	cmp	r3, #5
 8006c6e:	d102      	bne.n	8006c76 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006c70:	2303      	movs	r3, #3
 8006c72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006c74:	e0d6      	b.n	8006e24 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	f040 80d3 	bne.w	8006e24 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	220b      	movs	r2, #11
 8006c82:	761a      	strb	r2, [r3, #24]
      break;
 8006c84:	e0ce      	b.n	8006e24 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6899      	ldr	r1, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	899a      	ldrh	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	795b      	ldrb	r3, [r3, #5]
 8006c92:	2001      	movs	r0, #1
 8006c94:	9000      	str	r0, [sp, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f8ea 	bl	8006e70 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2206      	movs	r2, #6
 8006cac:	761a      	strb	r2, [r3, #24]
      break;
 8006cae:	e0c0      	b.n	8006e32 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	795b      	ldrb	r3, [r3, #5]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc4c 	bl	8007554 <USBH_LL_GetURBState>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d103      	bne.n	8006cce <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2207      	movs	r2, #7
 8006cca:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ccc:	e0ac      	b.n	8006e28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b05      	cmp	r3, #5
 8006cd2:	d105      	bne.n	8006ce0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	220c      	movs	r2, #12
 8006cd8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006cde:	e0a3      	b.n	8006e28 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d103      	bne.n	8006cee <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2205      	movs	r2, #5
 8006cea:	761a      	strb	r2, [r3, #24]
      break;
 8006cec:	e09c      	b.n	8006e28 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	f040 8099 	bne.w	8006e28 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	220b      	movs	r2, #11
 8006cfa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006d00:	e092      	b.n	8006e28 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	791b      	ldrb	r3, [r3, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f8d5 	bl	8006eba <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2208      	movs	r2, #8
 8006d20:	761a      	strb	r2, [r3, #24]

      break;
 8006d22:	e086      	b.n	8006e32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	791b      	ldrb	r3, [r3, #4]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fc12 	bl	8007554 <USBH_LL_GetURBState>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d105      	bne.n	8006d46 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220d      	movs	r2, #13
 8006d3e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006d44:	e072      	b.n	8006e2c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	d103      	bne.n	8006d54 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	220b      	movs	r2, #11
 8006d50:	761a      	strb	r2, [r3, #24]
      break;
 8006d52:	e06b      	b.n	8006e2c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b05      	cmp	r3, #5
 8006d58:	d168      	bne.n	8006e2c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5e:	e065      	b.n	8006e2c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	795b      	ldrb	r3, [r3, #5]
 8006d64:	2201      	movs	r2, #1
 8006d66:	9200      	str	r2, [sp, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f87f 	bl	8006e70 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	220a      	movs	r2, #10
 8006d82:	761a      	strb	r2, [r3, #24]
      break;
 8006d84:	e055      	b.n	8006e32 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	795b      	ldrb	r3, [r3, #5]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fbe1 	bl	8007554 <USBH_LL_GetURBState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d105      	bne.n	8006da8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	220d      	movs	r2, #13
 8006da4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006da6:	e043      	b.n	8006e30 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d103      	bne.n	8006db6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2209      	movs	r2, #9
 8006db2:	761a      	strb	r2, [r3, #24]
      break;
 8006db4:	e03c      	b.n	8006e30 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d139      	bne.n	8006e30 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	220b      	movs	r2, #11
 8006dc0:	761a      	strb	r2, [r3, #24]
      break;
 8006dc2:	e035      	b.n	8006e30 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7e5b      	ldrb	r3, [r3, #25]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	765a      	strb	r2, [r3, #25]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7e5b      	ldrb	r3, [r3, #25]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d806      	bhi.n	8006de6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006de4:	e025      	b.n	8006e32 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dec:	2106      	movs	r1, #6
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	795b      	ldrb	r3, [r3, #5]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f90c 	bl	800701c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	791b      	ldrb	r3, [r3, #4]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f906 	bl	800701c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006e16:	2302      	movs	r3, #2
 8006e18:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1a:	e00a      	b.n	8006e32 <USBH_HandleControl+0x2de>

    default:
      break;
 8006e1c:	bf00      	nop
 8006e1e:	e008      	b.n	8006e32 <USBH_HandleControl+0x2de>
      break;
 8006e20:	bf00      	nop
 8006e22:	e006      	b.n	8006e32 <USBH_HandleControl+0x2de>
      break;
 8006e24:	bf00      	nop
 8006e26:	e004      	b.n	8006e32 <USBH_HandleControl+0x2de>
      break;
 8006e28:	bf00      	nop
 8006e2a:	e002      	b.n	8006e32 <USBH_HandleControl+0x2de>
      break;
 8006e2c:	bf00      	nop
 8006e2e:	e000      	b.n	8006e32 <USBH_HandleControl+0x2de>
      break;
 8006e30:	bf00      	nop
  }

  return status;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af04      	add	r7, sp, #16
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006e4a:	79f9      	ldrb	r1, [r7, #7]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	2308      	movs	r3, #8
 8006e52:	9302      	str	r3, [sp, #8]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fb46 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af04      	add	r7, sp, #16
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	460b      	mov	r3, r1
 8006e80:	80fb      	strh	r3, [r7, #6]
 8006e82:	4613      	mov	r3, r2
 8006e84:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006e94:	7979      	ldrb	r1, [r7, #5]
 8006e96:	7e3b      	ldrb	r3, [r7, #24]
 8006e98:	9303      	str	r3, [sp, #12]
 8006e9a:	88fb      	ldrh	r3, [r7, #6]
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fb21 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	af04      	add	r7, sp, #16
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	460b      	mov	r3, r1
 8006eca:	80fb      	strh	r3, [r7, #6]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006ed0:	7979      	ldrb	r1, [r7, #5]
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	9303      	str	r3, [sp, #12]
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 fb03 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006eec:	2300      	movs	r3, #0

}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b088      	sub	sp, #32
 8006efa:	af04      	add	r7, sp, #16
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	4611      	mov	r1, r2
 8006f02:	461a      	mov	r2, r3
 8006f04:	460b      	mov	r3, r1
 8006f06:	80fb      	strh	r3, [r7, #6]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f1a:	7979      	ldrb	r1, [r7, #5]
 8006f1c:	7e3b      	ldrb	r3, [r7, #24]
 8006f1e:	9303      	str	r3, [sp, #12]
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	9302      	str	r3, [sp, #8]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	2301      	movs	r3, #1
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	2200      	movs	r2, #0
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fade 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af04      	add	r7, sp, #16
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	460b      	mov	r3, r1
 8006f50:	80fb      	strh	r3, [r7, #6]
 8006f52:	4613      	mov	r3, r2
 8006f54:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006f56:	7979      	ldrb	r1, [r7, #5]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	2301      	movs	r3, #1
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fac0 	bl	80074f2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	70fb      	strb	r3, [r7, #3]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	70bb      	strb	r3, [r7, #2]
 8006f92:	4613      	mov	r3, r2
 8006f94:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006f96:	7878      	ldrb	r0, [r7, #1]
 8006f98:	78ba      	ldrb	r2, [r7, #2]
 8006f9a:	78f9      	ldrb	r1, [r7, #3]
 8006f9c:	8b3b      	ldrh	r3, [r7, #24]
 8006f9e:	9302      	str	r3, [sp, #8]
 8006fa0:	7d3b      	ldrb	r3, [r7, #20]
 8006fa2:	9301      	str	r3, [sp, #4]
 8006fa4:	7c3b      	ldrb	r3, [r7, #16]
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa53 	bl	8007456 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fa72 	bl	80074b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f836 	bl	8007058 <USBH_GetFreePipe>
 8006fec:	4603      	mov	r3, r0
 8006fee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00a      	beq.n	8007010 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006ffa:	78fa      	ldrb	r2, [r7, #3]
 8006ffc:	89fb      	ldrh	r3, [r7, #14]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	33e0      	adds	r3, #224	; 0xe0
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007010:	89fb      	ldrh	r3, [r7, #14]
 8007012:	b2db      	uxtb	r3, r3
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b0a      	cmp	r3, #10
 800702c:	d80d      	bhi.n	800704a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	33e0      	adds	r3, #224	; 0xe0
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	78fb      	ldrb	r3, [r7, #3]
 800703c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	33e0      	adds	r3, #224	; 0xe0
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e00f      	b.n	800708a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	33e0      	adds	r3, #224	; 0xe0
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	b29b      	uxth	r3, r3
 8007082:	e007      	b.n	8007094 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	3301      	adds	r3, #1
 8007088:	73fb      	strb	r3, [r7, #15]
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b0a      	cmp	r3, #10
 800708e:	d9ec      	bls.n	800706a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007090:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80070a4:	2201      	movs	r2, #1
 80070a6:	490e      	ldr	r1, [pc, #56]	; (80070e0 <MX_USB_HOST_Init+0x40>)
 80070a8:	480e      	ldr	r0, [pc, #56]	; (80070e4 <MX_USB_HOST_Init+0x44>)
 80070aa:	f7fe fca1 	bl	80059f0 <USBH_Init>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80070b4:	f7f9 fd0a 	bl	8000acc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80070b8:	490b      	ldr	r1, [pc, #44]	; (80070e8 <MX_USB_HOST_Init+0x48>)
 80070ba:	480a      	ldr	r0, [pc, #40]	; (80070e4 <MX_USB_HOST_Init+0x44>)
 80070bc:	f7fe fd26 	bl	8005b0c <USBH_RegisterClass>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80070c6:	f7f9 fd01 	bl	8000acc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80070ca:	4806      	ldr	r0, [pc, #24]	; (80070e4 <MX_USB_HOST_Init+0x44>)
 80070cc:	f7fe fdaa 	bl	8005c24 <USBH_Start>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d001      	beq.n	80070da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80070d6:	f7f9 fcf9 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80070da:	bf00      	nop
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	08007101 	.word	0x08007101
 80070e4:	200001b4 	.word	0x200001b4
 80070e8:	2000000c 	.word	0x2000000c

080070ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <MX_USB_HOST_Process+0x10>)
 80070f2:	f7fe fda7 	bl	8005c44 <USBH_Process>
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200001b4 	.word	0x200001b4

08007100 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	3b01      	subs	r3, #1
 8007110:	2b04      	cmp	r3, #4
 8007112:	d819      	bhi.n	8007148 <USBH_UserProcess+0x48>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <USBH_UserProcess+0x1c>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007149 	.word	0x08007149
 8007120:	08007139 	.word	0x08007139
 8007124:	08007149 	.word	0x08007149
 8007128:	08007141 	.word	0x08007141
 800712c:	08007131 	.word	0x08007131
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <USBH_UserProcess+0x58>)
 8007132:	2203      	movs	r2, #3
 8007134:	701a      	strb	r2, [r3, #0]
  break;
 8007136:	e008      	b.n	800714a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <USBH_UserProcess+0x58>)
 800713a:	2202      	movs	r2, #2
 800713c:	701a      	strb	r2, [r3, #0]
  break;
 800713e:	e004      	b.n	800714a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <USBH_UserProcess+0x58>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
  break;
 8007146:	e000      	b.n	800714a <USBH_UserProcess+0x4a>

  default:
  break;
 8007148:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200000b0 	.word	0x200000b0

0800715c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08a      	sub	sp, #40	; 0x28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007164:	f107 0314 	add.w	r3, r7, #20
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800717c:	d147      	bne.n	800720e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	4b25      	ldr	r3, [pc, #148]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	4a24      	ldr	r2, [pc, #144]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	6313      	str	r3, [r2, #48]	; 0x30
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	613b      	str	r3, [r7, #16]
 8007198:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800719a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800719e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	4619      	mov	r1, r3
 80071ae:	481b      	ldr	r0, [pc, #108]	; (800721c <HAL_HCD_MspInit+0xc0>)
 80071b0:	f7fa f818 	bl	80011e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80071b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80071b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ba:	2302      	movs	r3, #2
 80071bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071c2:	2300      	movs	r3, #0
 80071c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071c6:	230a      	movs	r3, #10
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ca:	f107 0314 	add.w	r3, r7, #20
 80071ce:	4619      	mov	r1, r3
 80071d0:	4812      	ldr	r0, [pc, #72]	; (800721c <HAL_HCD_MspInit+0xc0>)
 80071d2:	f7fa f807 	bl	80011e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	4a0f      	ldr	r2, [pc, #60]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e0:	6353      	str	r3, [r2, #52]	; 0x34
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	4b0c      	ldr	r3, [pc, #48]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071f0:	6453      	str	r3, [r2, #68]	; 0x44
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <HAL_HCD_MspInit+0xbc>)
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	2043      	movs	r0, #67	; 0x43
 8007204:	f7f9 ffb7 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007208:	2043      	movs	r0, #67	; 0x43
 800720a:	f7f9 ffd0 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800720e:	bf00      	nop
 8007210:	3728      	adds	r7, #40	; 0x28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800
 800721c:	40020000 	.word	0x40020000

08007220 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff f8db 	bl	80063ea <USBH_LL_IncTimer>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff f913 	bl	8006476 <USBH_LL_Connect>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff f91c 	bl	80064a4 <USBH_LL_Disconnect>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
 8007280:	4613      	mov	r3, r2
 8007282:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800729e:	4618      	mov	r0, r3
 80072a0:	f7ff f8cd 	bl	800643e <USBH_LL_PortEnabled>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff f8cd 	bl	800645a <USBH_LL_PortDisabled>
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d12a      	bne.n	8007330 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80072da:	4a18      	ldr	r2, [pc, #96]	; (800733c <USBH_LL_Init+0x74>)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a15      	ldr	r2, [pc, #84]	; (800733c <USBH_LL_Init+0x74>)
 80072e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80072ea:	4b14      	ldr	r3, [pc, #80]	; (800733c <USBH_LL_Init+0x74>)
 80072ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80072f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80072f2:	4b12      	ldr	r3, [pc, #72]	; (800733c <USBH_LL_Init+0x74>)
 80072f4:	2208      	movs	r2, #8
 80072f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80072f8:	4b10      	ldr	r3, [pc, #64]	; (800733c <USBH_LL_Init+0x74>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <USBH_LL_Init+0x74>)
 8007300:	2200      	movs	r2, #0
 8007302:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <USBH_LL_Init+0x74>)
 8007306:	2202      	movs	r2, #2
 8007308:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800730a:	4b0c      	ldr	r3, [pc, #48]	; (800733c <USBH_LL_Init+0x74>)
 800730c:	2200      	movs	r2, #0
 800730e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007310:	480a      	ldr	r0, [pc, #40]	; (800733c <USBH_LL_Init+0x74>)
 8007312:	f7fa f91c 	bl	800154e <HAL_HCD_Init>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800731c:	f7f9 fbd6 	bl	8000acc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007320:	4806      	ldr	r0, [pc, #24]	; (800733c <USBH_LL_Init+0x74>)
 8007322:	f7fa fd00 	bl	8001d26 <HAL_HCD_GetCurrentFrame>
 8007326:	4603      	mov	r3, r0
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff f84e 	bl	80063cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	2000058c 	.word	0x2000058c

08007340 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007356:	4618      	mov	r0, r3
 8007358:	f7fa fc6f 	bl	8001c3a <HAL_HCD_Start>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f95c 	bl	8007620 <USBH_Get_USB_Status>
 8007368:	4603      	mov	r3, r0
 800736a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800736c:	7bbb      	ldrb	r3, [r7, #14]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800738c:	4618      	mov	r0, r3
 800738e:	f7fa fc77 	bl	8001c80 <HAL_HCD_Stop>
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f941 	bl	8007620 <USBH_Get_USB_Status>
 800739e:	4603      	mov	r3, r0
 80073a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80073b4:	2301      	movs	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fa fcbf 	bl	8001d42 <HAL_HCD_GetCurrentSpeed>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d00c      	beq.n	80073e4 <USBH_LL_GetSpeed+0x38>
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d80d      	bhi.n	80073ea <USBH_LL_GetSpeed+0x3e>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <USBH_LL_GetSpeed+0x2c>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d003      	beq.n	80073de <USBH_LL_GetSpeed+0x32>
 80073d6:	e008      	b.n	80073ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]
    break;
 80073dc:	e008      	b.n	80073f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
    break;
 80073e2:	e005      	b.n	80073f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80073e4:	2302      	movs	r3, #2
 80073e6:	73fb      	strb	r3, [r7, #15]
    break;
 80073e8:	e002      	b.n	80073f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
    break;
 80073ee:	bf00      	nop
  }
  return  speed;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007410:	4618      	mov	r0, r3
 8007412:	f7fa fc52 	bl	8001cba <HAL_HCD_ResetPort>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f8ff 	bl	8007620 <USBH_Get_USB_Status>
 8007422:	4603      	mov	r3, r0
 8007424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007426:	7bbb      	ldrb	r3, [r7, #14]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fa fc59 	bl	8001cfe <HAL_HCD_HC_GetXferCount>
 800744c:	4603      	mov	r3, r0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007456:	b590      	push	{r4, r7, lr}
 8007458:	b089      	sub	sp, #36	; 0x24
 800745a:	af04      	add	r7, sp, #16
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	461a      	mov	r2, r3
 8007464:	4603      	mov	r3, r0
 8007466:	70fb      	strb	r3, [r7, #3]
 8007468:	460b      	mov	r3, r1
 800746a:	70bb      	strb	r3, [r7, #2]
 800746c:	4613      	mov	r3, r2
 800746e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800747e:	787c      	ldrb	r4, [r7, #1]
 8007480:	78ba      	ldrb	r2, [r7, #2]
 8007482:	78f9      	ldrb	r1, [r7, #3]
 8007484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800748c:	9301      	str	r3, [sp, #4]
 800748e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	4623      	mov	r3, r4
 8007496:	f7fa f8bc 	bl	8001612 <HAL_HCD_HC_Init>
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 f8bd 	bl	8007620 <USBH_Get_USB_Status>
 80074a6:	4603      	mov	r3, r0
 80074a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}

080074b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa f92c 	bl	8001730 <HAL_HCD_HC_Halt>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 f89e 	bl	8007620 <USBH_Get_USB_Status>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80074f2:	b590      	push	{r4, r7, lr}
 80074f4:	b089      	sub	sp, #36	; 0x24
 80074f6:	af04      	add	r7, sp, #16
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	461a      	mov	r2, r3
 8007500:	4603      	mov	r3, r0
 8007502:	70fb      	strb	r3, [r7, #3]
 8007504:	460b      	mov	r3, r1
 8007506:	70bb      	strb	r3, [r7, #2]
 8007508:	4613      	mov	r3, r2
 800750a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800751a:	787c      	ldrb	r4, [r7, #1]
 800751c:	78ba      	ldrb	r2, [r7, #2]
 800751e:	78f9      	ldrb	r1, [r7, #3]
 8007520:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	4623      	mov	r3, r4
 8007536:	f7fa f91f 	bl	8001778 <HAL_HCD_HC_SubmitRequest>
 800753a:	4603      	mov	r3, r0
 800753c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	4618      	mov	r0, r3
 8007542:	f000 f86d 	bl	8007620 <USBH_Get_USB_Status>
 8007546:	4603      	mov	r3, r0
 8007548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800754a:	7bbb      	ldrb	r3, [r7, #14]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	bd90      	pop	{r4, r7, pc}

08007554 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fa fbb3 	bl	8001cd6 <HAL_HCD_HC_GetURBState>
 8007570:	4603      	mov	r3, r0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800758c:	2b01      	cmp	r3, #1
 800758e:	d103      	bne.n	8007598 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f870 	bl	8007678 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007598:	20c8      	movs	r0, #200	; 0xc8
 800759a:	f7f9 fced 	bl	8000f78 <HAL_Delay>
  return USBH_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
 80075b4:	4613      	mov	r3, r2
 80075b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	212c      	movs	r1, #44	; 0x2c
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	4413      	add	r3, r2
 80075cc:	333b      	adds	r3, #59	; 0x3b
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d009      	beq.n	80075e8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	212c      	movs	r1, #44	; 0x2c
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	4413      	add	r3, r2
 80075e0:	3354      	adds	r3, #84	; 0x54
 80075e2:	78ba      	ldrb	r2, [r7, #2]
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e008      	b.n	80075fa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	212c      	movs	r1, #44	; 0x2c
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	3355      	adds	r3, #85	; 0x55
 80075f6:	78ba      	ldrb	r2, [r7, #2]
 80075f8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7f9 fcb1 	bl	8000f78 <HAL_Delay>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d817      	bhi.n	8007664 <USBH_Get_USB_Status+0x44>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <USBH_Get_USB_Status+0x1c>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007653 	.word	0x08007653
 8007644:	08007659 	.word	0x08007659
 8007648:	0800765f 	.word	0x0800765f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
    break;
 8007650:	e00b      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007652:	2302      	movs	r3, #2
 8007654:	73fb      	strb	r3, [r7, #15]
    break;
 8007656:	e008      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
    break;
 800765c:	e005      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800765e:	2302      	movs	r3, #2
 8007660:	73fb      	strb	r3, [r7, #15]
    break;
 8007662:	e002      	b.n	800766a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007664:	2302      	movs	r3, #2
 8007666:	73fb      	strb	r3, [r7, #15]
    break;
 8007668:	bf00      	nop
  }
  return usb_status;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]
 8007690:	e001      	b.n	8007696 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007692:	2300      	movs	r3, #0
 8007694:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	461a      	mov	r2, r3
 800769a:	2101      	movs	r1, #1
 800769c:	4803      	ldr	r0, [pc, #12]	; (80076ac <MX_DriverVbusFS+0x34>)
 800769e:	f7f9 ff3d 	bl	800151c <HAL_GPIO_WritePin>
}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40020800 	.word	0x40020800

080076b0 <__errno>:
 80076b0:	4b01      	ldr	r3, [pc, #4]	; (80076b8 <__errno+0x8>)
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	2000002c 	.word	0x2000002c

080076bc <__libc_init_array>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	4d0d      	ldr	r5, [pc, #52]	; (80076f4 <__libc_init_array+0x38>)
 80076c0:	4c0d      	ldr	r4, [pc, #52]	; (80076f8 <__libc_init_array+0x3c>)
 80076c2:	1b64      	subs	r4, r4, r5
 80076c4:	10a4      	asrs	r4, r4, #2
 80076c6:	2600      	movs	r6, #0
 80076c8:	42a6      	cmp	r6, r4
 80076ca:	d109      	bne.n	80076e0 <__libc_init_array+0x24>
 80076cc:	4d0b      	ldr	r5, [pc, #44]	; (80076fc <__libc_init_array+0x40>)
 80076ce:	4c0c      	ldr	r4, [pc, #48]	; (8007700 <__libc_init_array+0x44>)
 80076d0:	f000 f8f8 	bl	80078c4 <_init>
 80076d4:	1b64      	subs	r4, r4, r5
 80076d6:	10a4      	asrs	r4, r4, #2
 80076d8:	2600      	movs	r6, #0
 80076da:	42a6      	cmp	r6, r4
 80076dc:	d105      	bne.n	80076ea <__libc_init_array+0x2e>
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e4:	4798      	blx	r3
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7ee      	b.n	80076c8 <__libc_init_array+0xc>
 80076ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ee:	4798      	blx	r3
 80076f0:	3601      	adds	r6, #1
 80076f2:	e7f2      	b.n	80076da <__libc_init_array+0x1e>
 80076f4:	080078e8 	.word	0x080078e8
 80076f8:	080078e8 	.word	0x080078e8
 80076fc:	080078e8 	.word	0x080078e8
 8007700:	080078ec 	.word	0x080078ec

08007704 <malloc>:
 8007704:	4b02      	ldr	r3, [pc, #8]	; (8007710 <malloc+0xc>)
 8007706:	4601      	mov	r1, r0
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	f000 b863 	b.w	80077d4 <_malloc_r>
 800770e:	bf00      	nop
 8007710:	2000002c 	.word	0x2000002c

08007714 <free>:
 8007714:	4b02      	ldr	r3, [pc, #8]	; (8007720 <free+0xc>)
 8007716:	4601      	mov	r1, r0
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	f000 b80b 	b.w	8007734 <_free_r>
 800771e:	bf00      	nop
 8007720:	2000002c 	.word	0x2000002c

08007724 <memset>:
 8007724:	4402      	add	r2, r0
 8007726:	4603      	mov	r3, r0
 8007728:	4293      	cmp	r3, r2
 800772a:	d100      	bne.n	800772e <memset+0xa>
 800772c:	4770      	bx	lr
 800772e:	f803 1b01 	strb.w	r1, [r3], #1
 8007732:	e7f9      	b.n	8007728 <memset+0x4>

08007734 <_free_r>:
 8007734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007736:	2900      	cmp	r1, #0
 8007738:	d048      	beq.n	80077cc <_free_r+0x98>
 800773a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773e:	9001      	str	r0, [sp, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f1a1 0404 	sub.w	r4, r1, #4
 8007746:	bfb8      	it	lt
 8007748:	18e4      	addlt	r4, r4, r3
 800774a:	f000 f8ad 	bl	80078a8 <__malloc_lock>
 800774e:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <_free_r+0x9c>)
 8007750:	9801      	ldr	r0, [sp, #4]
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	4615      	mov	r5, r2
 8007756:	b933      	cbnz	r3, 8007766 <_free_r+0x32>
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	6014      	str	r4, [r2, #0]
 800775c:	b003      	add	sp, #12
 800775e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007762:	f000 b8a7 	b.w	80078b4 <__malloc_unlock>
 8007766:	42a3      	cmp	r3, r4
 8007768:	d90b      	bls.n	8007782 <_free_r+0x4e>
 800776a:	6821      	ldr	r1, [r4, #0]
 800776c:	1862      	adds	r2, r4, r1
 800776e:	4293      	cmp	r3, r2
 8007770:	bf04      	itt	eq
 8007772:	681a      	ldreq	r2, [r3, #0]
 8007774:	685b      	ldreq	r3, [r3, #4]
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	bf04      	itt	eq
 800777a:	1852      	addeq	r2, r2, r1
 800777c:	6022      	streq	r2, [r4, #0]
 800777e:	602c      	str	r4, [r5, #0]
 8007780:	e7ec      	b.n	800775c <_free_r+0x28>
 8007782:	461a      	mov	r2, r3
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b10b      	cbz	r3, 800778c <_free_r+0x58>
 8007788:	42a3      	cmp	r3, r4
 800778a:	d9fa      	bls.n	8007782 <_free_r+0x4e>
 800778c:	6811      	ldr	r1, [r2, #0]
 800778e:	1855      	adds	r5, r2, r1
 8007790:	42a5      	cmp	r5, r4
 8007792:	d10b      	bne.n	80077ac <_free_r+0x78>
 8007794:	6824      	ldr	r4, [r4, #0]
 8007796:	4421      	add	r1, r4
 8007798:	1854      	adds	r4, r2, r1
 800779a:	42a3      	cmp	r3, r4
 800779c:	6011      	str	r1, [r2, #0]
 800779e:	d1dd      	bne.n	800775c <_free_r+0x28>
 80077a0:	681c      	ldr	r4, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6053      	str	r3, [r2, #4]
 80077a6:	4421      	add	r1, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	e7d7      	b.n	800775c <_free_r+0x28>
 80077ac:	d902      	bls.n	80077b4 <_free_r+0x80>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	e7d3      	b.n	800775c <_free_r+0x28>
 80077b4:	6825      	ldr	r5, [r4, #0]
 80077b6:	1961      	adds	r1, r4, r5
 80077b8:	428b      	cmp	r3, r1
 80077ba:	bf04      	itt	eq
 80077bc:	6819      	ldreq	r1, [r3, #0]
 80077be:	685b      	ldreq	r3, [r3, #4]
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	bf04      	itt	eq
 80077c4:	1949      	addeq	r1, r1, r5
 80077c6:	6021      	streq	r1, [r4, #0]
 80077c8:	6054      	str	r4, [r2, #4]
 80077ca:	e7c7      	b.n	800775c <_free_r+0x28>
 80077cc:	b003      	add	sp, #12
 80077ce:	bd30      	pop	{r4, r5, pc}
 80077d0:	200000b4 	.word	0x200000b4

080077d4 <_malloc_r>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	1ccd      	adds	r5, r1, #3
 80077d8:	f025 0503 	bic.w	r5, r5, #3
 80077dc:	3508      	adds	r5, #8
 80077de:	2d0c      	cmp	r5, #12
 80077e0:	bf38      	it	cc
 80077e2:	250c      	movcc	r5, #12
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	4606      	mov	r6, r0
 80077e8:	db01      	blt.n	80077ee <_malloc_r+0x1a>
 80077ea:	42a9      	cmp	r1, r5
 80077ec:	d903      	bls.n	80077f6 <_malloc_r+0x22>
 80077ee:	230c      	movs	r3, #12
 80077f0:	6033      	str	r3, [r6, #0]
 80077f2:	2000      	movs	r0, #0
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f6:	f000 f857 	bl	80078a8 <__malloc_lock>
 80077fa:	4921      	ldr	r1, [pc, #132]	; (8007880 <_malloc_r+0xac>)
 80077fc:	680a      	ldr	r2, [r1, #0]
 80077fe:	4614      	mov	r4, r2
 8007800:	b99c      	cbnz	r4, 800782a <_malloc_r+0x56>
 8007802:	4f20      	ldr	r7, [pc, #128]	; (8007884 <_malloc_r+0xb0>)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b923      	cbnz	r3, 8007812 <_malloc_r+0x3e>
 8007808:	4621      	mov	r1, r4
 800780a:	4630      	mov	r0, r6
 800780c:	f000 f83c 	bl	8007888 <_sbrk_r>
 8007810:	6038      	str	r0, [r7, #0]
 8007812:	4629      	mov	r1, r5
 8007814:	4630      	mov	r0, r6
 8007816:	f000 f837 	bl	8007888 <_sbrk_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d123      	bne.n	8007866 <_malloc_r+0x92>
 800781e:	230c      	movs	r3, #12
 8007820:	6033      	str	r3, [r6, #0]
 8007822:	4630      	mov	r0, r6
 8007824:	f000 f846 	bl	80078b4 <__malloc_unlock>
 8007828:	e7e3      	b.n	80077f2 <_malloc_r+0x1e>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	1b5b      	subs	r3, r3, r5
 800782e:	d417      	bmi.n	8007860 <_malloc_r+0x8c>
 8007830:	2b0b      	cmp	r3, #11
 8007832:	d903      	bls.n	800783c <_malloc_r+0x68>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	441c      	add	r4, r3
 8007838:	6025      	str	r5, [r4, #0]
 800783a:	e004      	b.n	8007846 <_malloc_r+0x72>
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	42a2      	cmp	r2, r4
 8007840:	bf0c      	ite	eq
 8007842:	600b      	streq	r3, [r1, #0]
 8007844:	6053      	strne	r3, [r2, #4]
 8007846:	4630      	mov	r0, r6
 8007848:	f000 f834 	bl	80078b4 <__malloc_unlock>
 800784c:	f104 000b 	add.w	r0, r4, #11
 8007850:	1d23      	adds	r3, r4, #4
 8007852:	f020 0007 	bic.w	r0, r0, #7
 8007856:	1ac2      	subs	r2, r0, r3
 8007858:	d0cc      	beq.n	80077f4 <_malloc_r+0x20>
 800785a:	1a1b      	subs	r3, r3, r0
 800785c:	50a3      	str	r3, [r4, r2]
 800785e:	e7c9      	b.n	80077f4 <_malloc_r+0x20>
 8007860:	4622      	mov	r2, r4
 8007862:	6864      	ldr	r4, [r4, #4]
 8007864:	e7cc      	b.n	8007800 <_malloc_r+0x2c>
 8007866:	1cc4      	adds	r4, r0, #3
 8007868:	f024 0403 	bic.w	r4, r4, #3
 800786c:	42a0      	cmp	r0, r4
 800786e:	d0e3      	beq.n	8007838 <_malloc_r+0x64>
 8007870:	1a21      	subs	r1, r4, r0
 8007872:	4630      	mov	r0, r6
 8007874:	f000 f808 	bl	8007888 <_sbrk_r>
 8007878:	3001      	adds	r0, #1
 800787a:	d1dd      	bne.n	8007838 <_malloc_r+0x64>
 800787c:	e7cf      	b.n	800781e <_malloc_r+0x4a>
 800787e:	bf00      	nop
 8007880:	200000b4 	.word	0x200000b4
 8007884:	200000b8 	.word	0x200000b8

08007888 <_sbrk_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	; (80078a4 <_sbrk_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7f9 fa8c 	bl	8000db0 <_sbrk>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_sbrk_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_sbrk_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000890 	.word	0x20000890

080078a8 <__malloc_lock>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__malloc_lock+0x8>)
 80078aa:	f000 b809 	b.w	80078c0 <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20000898 	.word	0x20000898

080078b4 <__malloc_unlock>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__malloc_unlock+0x8>)
 80078b6:	f000 b804 	b.w	80078c2 <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20000898 	.word	0x20000898

080078c0 <__retarget_lock_acquire_recursive>:
 80078c0:	4770      	bx	lr

080078c2 <__retarget_lock_release_recursive>:
 80078c2:	4770      	bx	lr

080078c4 <_init>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr

080078d0 <_fini>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr
